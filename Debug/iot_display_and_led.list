
iot_display_and_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004354  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  08004460  08004460  00014460  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005320  08005320  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005320  08005320  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005320  08005320  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005324  08005324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000928  2000007c  080053a4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  080053a4  000209a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d145  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cb  00000000  00000000  0002d1ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002f6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018f08  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000f9e7  00000000  00000000  00049190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00086e8f  00000000  00000000  00058b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000dfa06  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000b40  00000000  00000000  000dfa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003514  00000000  00000000  000e0598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004448 	.word	0x08004448

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08004448 	.word	0x08004448

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <handle_root_request>:
#include "root_html.h"

extern uint8_t rx_buffer[];
extern uint16_t rx_index;

static void handle_root_request(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	send_html_response(HTML_RESPONSE_HEADER, LED_CONTROLLER_HTML);
 8000160:	4902      	ldr	r1, [pc, #8]	; (800016c <handle_root_request+0x10>)
 8000162:	4803      	ldr	r0, [pc, #12]	; (8000170 <handle_root_request+0x14>)
 8000164:	f000 f9f0 	bl	8000548 <send_html_response>
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	08004460 	.word	0x08004460
 8000170:	08004808 	.word	0x08004808

08000174 <handle_send_text>:

static void handle_send_text(const HTTP_REQUEST* request) {
 8000174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000178:	b087      	sub	sp, #28
 800017a:	af00      	add	r7, sp, #0
 800017c:	6078      	str	r0, [r7, #4]
 800017e:	466b      	mov	r3, sp
 8000180:	461e      	mov	r6, r3
	const char* prefix = "/send_text?msg=";
 8000182:	4b25      	ldr	r3, [pc, #148]	; (8000218 <handle_send_text+0xa4>)
 8000184:	617b      	str	r3, [r7, #20]
	size_t prefix_len = strlen(prefix);
 8000186:	6978      	ldr	r0, [r7, #20]
 8000188:	f7ff ffe0 	bl	800014c <strlen>
 800018c:	6138      	str	r0, [r7, #16]

	char text[request->path_len - prefix_len + 1];
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	68da      	ldr	r2, [r3, #12]
 8000192:	693b      	ldr	r3, [r7, #16]
 8000194:	1ad3      	subs	r3, r2, r3
 8000196:	1c59      	adds	r1, r3, #1
 8000198:	460b      	mov	r3, r1
 800019a:	3b01      	subs	r3, #1
 800019c:	60fb      	str	r3, [r7, #12]
 800019e:	2300      	movs	r3, #0
 80001a0:	4688      	mov	r8, r1
 80001a2:	4699      	mov	r9, r3
 80001a4:	f04f 0200 	mov.w	r2, #0
 80001a8:	f04f 0300 	mov.w	r3, #0
 80001ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80001b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80001b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80001b8:	2300      	movs	r3, #0
 80001ba:	460c      	mov	r4, r1
 80001bc:	461d      	mov	r5, r3
 80001be:	f04f 0200 	mov.w	r2, #0
 80001c2:	f04f 0300 	mov.w	r3, #0
 80001c6:	00eb      	lsls	r3, r5, #3
 80001c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80001cc:	00e2      	lsls	r2, r4, #3
 80001ce:	1dcb      	adds	r3, r1, #7
 80001d0:	08db      	lsrs	r3, r3, #3
 80001d2:	00db      	lsls	r3, r3, #3
 80001d4:	ebad 0d03 	sub.w	sp, sp, r3
 80001d8:	466b      	mov	r3, sp
 80001da:	3300      	adds	r3, #0
 80001dc:	60bb      	str	r3, [r7, #8]
	extract_query_param(text, request, prefix);
 80001de:	697a      	ldr	r2, [r7, #20]
 80001e0:	6879      	ldr	r1, [r7, #4]
 80001e2:	68b8      	ldr	r0, [r7, #8]
 80001e4:	f000 f92e 	bl	8000444 <extract_query_param>

	ssd1306_Clear();
 80001e8:	f001 fa36 	bl	8001658 <ssd1306_Clear>
	ssd1306_SetCursor(0, 0);
 80001ec:	2100      	movs	r1, #0
 80001ee:	2000      	movs	r0, #0
 80001f0:	f001 fa10 	bl	8001614 <ssd1306_SetCursor>
	ssd1306_WriteString(text, Font_7x10);
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <handle_send_text+0xa8>)
 80001f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80001fa:	68b8      	ldr	r0, [r7, #8]
 80001fc:	f001 f9e4 	bl	80015c8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000200:	f001 f8b0 	bl	8001364 <ssd1306_UpdateScreen>

	send_html_response(HTML_RESPONSE_NO_CONTENT_HEADER, NULL);
 8000204:	2100      	movs	r1, #0
 8000206:	4806      	ldr	r0, [pc, #24]	; (8000220 <handle_send_text+0xac>)
 8000208:	f000 f99e 	bl	8000548 <send_html_response>
 800020c:	46b5      	mov	sp, r6
}
 800020e:	bf00      	nop
 8000210:	371c      	adds	r7, #28
 8000212:	46bd      	mov	sp, r7
 8000214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000218:	08004860 	.word	0x08004860
 800021c:	20000000 	.word	0x20000000
 8000220:	08004870 	.word	0x08004870

08000224 <handle_get_request>:

static void handle_get_request(const HTTP_REQUEST *request) {
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    if (is_path_match("/", request)) {
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	480b      	ldr	r0, [pc, #44]	; (800025c <handle_get_request+0x38>)
 8000230:	f000 f894 	bl	800035c <is_path_match>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d002      	beq.n	8000240 <handle_get_request+0x1c>
        handle_root_request();
 800023a:	f7ff ff8f 	bl	800015c <handle_root_request>
    }
    else if (is_query_path(request, "/send_text?msg=")) {
        handle_send_text(request);
    }
}
 800023e:	e009      	b.n	8000254 <handle_get_request+0x30>
    else if (is_query_path(request, "/send_text?msg=")) {
 8000240:	4907      	ldr	r1, [pc, #28]	; (8000260 <handle_get_request+0x3c>)
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f000 f8ac 	bl	80003a0 <is_query_path>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d002      	beq.n	8000254 <handle_get_request+0x30>
        handle_send_text(request);
 800024e:	6878      	ldr	r0, [r7, #4]
 8000250:	f7ff ff90 	bl	8000174 <handle_send_text>
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	080048a0 	.word	0x080048a0
 8000260:	08004860 	.word	0x08004860

08000264 <handle_post_request>:

static void handle_post_request(const HTTP_REQUEST *request) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    process_led_control(request);
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f000 f985 	bl	800057c <process_led_control>
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <handle_http_header_end>:


static void handle_http_header_end(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b0d6      	sub	sp, #344	; 0x158
 8000280:	af00      	add	r7, sp, #0
	if (is_end_of_header()) {
 8000282:	f001 fb7d 	bl	8001980 <is_end_of_header>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d030      	beq.n	80002ee <handle_http_header_end+0x72>
		rx_buffer[rx_index] = '\0';
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <handle_http_header_end+0x7c>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <handle_http_header_end+0x80>)
 8000294:	2100      	movs	r1, #0
 8000296:	5499      	strb	r1, [r3, r2]

		HTTP_REQUEST http_request;
		parse_http_request(rx_buffer, rx_index, &http_request);
 8000298:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <handle_http_header_end+0x7c>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	4619      	mov	r1, r3
 800029e:	463b      	mov	r3, r7
 80002a0:	461a      	mov	r2, r3
 80002a2:	4816      	ldr	r0, [pc, #88]	; (80002fc <handle_http_header_end+0x80>)
 80002a4:	f000 f8a1 	bl	80003ea <parse_http_request>

		if (http_method_is(&http_request, "GET")) {
 80002a8:	463b      	mov	r3, r7
 80002aa:	4915      	ldr	r1, [pc, #84]	; (8000300 <handle_http_header_end+0x84>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f833 	bl	8000318 <http_method_is>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d004      	beq.n	80002c2 <handle_http_header_end+0x46>
			handle_get_request(&http_request);
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ffb2 	bl	8000224 <handle_get_request>
 80002c0:	e00b      	b.n	80002da <handle_http_header_end+0x5e>
		}

		else if (http_method_is(&http_request, "POST")) {
 80002c2:	463b      	mov	r3, r7
 80002c4:	490f      	ldr	r1, [pc, #60]	; (8000304 <handle_http_header_end+0x88>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f826 	bl	8000318 <http_method_is>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <handle_http_header_end+0x5e>
			handle_post_request(&http_request);
 80002d2:	463b      	mov	r3, r7
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ffc5 	bl	8000264 <handle_post_request>
		}

		memset(rx_buffer, 0, rx_index);
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <handle_http_header_end+0x7c>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	4806      	ldr	r0, [pc, #24]	; (80002fc <handle_http_header_end+0x80>)
 80002e4:	f003 fc0e 	bl	8003b04 <memset>
		rx_index = 0;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <handle_http_header_end+0x7c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	801a      	strh	r2, [r3, #0]
	}
}
 80002ee:	bf00      	nop
 80002f0:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000098c 	.word	0x2000098c
 80002fc:	2000058c 	.word	0x2000058c
 8000300:	080048a4 	.word	0x080048a4
 8000304:	080048a8 	.word	0x080048a8

08000308 <http_handler>:

void http_handler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	uart_receive_http_byte();
 800030c:	f001 fbb2 	bl	8001a74 <uart_receive_http_byte>
	handle_http_header_end();
 8000310:	f7ff ffb4 	bl	800027c <handle_http_header_end>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}

08000318 <http_method_is>:
#include "http_parser.h"

bool http_method_is(const HTTP_REQUEST *request, const char *method_str) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
    size_t expected_len = strlen(method_str);
 8000322:	6838      	ldr	r0, [r7, #0]
 8000324:	f7ff ff12 	bl	800014c <strlen>
 8000328:	60f8      	str	r0, [r7, #12]
    return request->method_len == expected_len &&
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	68fa      	ldr	r2, [r7, #12]
 8000330:	429a      	cmp	r2, r3
 8000332:	d10b      	bne.n	800034c <http_method_is+0x34>
           strncmp(request->method, method_str, expected_len) == 0;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	68fa      	ldr	r2, [r7, #12]
 800033a:	6839      	ldr	r1, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f003 feb3 	bl	80040a8 <strncmp>
 8000342:	4603      	mov	r3, r0
    return request->method_len == expected_len &&
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <http_method_is+0x34>
 8000348:	2301      	movs	r3, #1
 800034a:	e000      	b.n	800034e <http_method_is+0x36>
 800034c:	2300      	movs	r3, #0
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	b2db      	uxtb	r3, r3
}
 8000354:	4618      	mov	r0, r3
 8000356:	3710      	adds	r7, #16
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <is_path_match>:

bool is_path_match(const char* path, const HTTP_REQUEST *const request) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
    size_t path_len = strlen(path);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f7ff fef0 	bl	800014c <strlen>
 800036c:	60f8      	str	r0, [r7, #12]
    return request->path_len == path_len &&
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	68db      	ldr	r3, [r3, #12]
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	429a      	cmp	r2, r3
 8000376:	d10b      	bne.n	8000390 <is_path_match+0x34>
           strncmp(path, request->path, path_len) == 0;
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	689b      	ldr	r3, [r3, #8]
 800037c:	68fa      	ldr	r2, [r7, #12]
 800037e:	4619      	mov	r1, r3
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f003 fe91 	bl	80040a8 <strncmp>
 8000386:	4603      	mov	r3, r0
    return request->path_len == path_len &&
 8000388:	2b00      	cmp	r3, #0
 800038a:	d101      	bne.n	8000390 <is_path_match+0x34>
 800038c:	2301      	movs	r3, #1
 800038e:	e000      	b.n	8000392 <is_path_match+0x36>
 8000390:	2300      	movs	r3, #0
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	b2db      	uxtb	r3, r3
}
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <is_query_path>:

bool is_query_path(const HTTP_REQUEST* request, const char* prefix) {
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
	return request->path_len >= strlen(prefix) &&
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68dc      	ldr	r4, [r3, #12]
 80003ae:	6838      	ldr	r0, [r7, #0]
 80003b0:	f7ff fecc 	bl	800014c <strlen>
 80003b4:	4603      	mov	r3, r0
 80003b6:	429c      	cmp	r4, r3
 80003b8:	d30f      	bcc.n	80003da <is_query_path+0x3a>
	       !memcmp(request->path, prefix, strlen(prefix));
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	689c      	ldr	r4, [r3, #8]
 80003be:	6838      	ldr	r0, [r7, #0]
 80003c0:	f7ff fec4 	bl	800014c <strlen>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	6839      	ldr	r1, [r7, #0]
 80003ca:	4620      	mov	r0, r4
 80003cc:	f003 fb70 	bl	8003ab0 <memcmp>
 80003d0:	4603      	mov	r3, r0
	return request->path_len >= strlen(prefix) &&
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d101      	bne.n	80003da <is_query_path+0x3a>
 80003d6:	2301      	movs	r3, #1
 80003d8:	e000      	b.n	80003dc <is_query_path+0x3c>
 80003da:	2300      	movs	r3, #0
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd90      	pop	{r4, r7, pc}

080003ea <parse_http_request>:

int parse_http_request(const uint8_t *buffer, size_t buffer_len, HTTP_REQUEST *request) {
 80003ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ec:	b08d      	sub	sp, #52	; 0x34
 80003ee:	af06      	add	r7, sp, #24
 80003f0:	60f8      	str	r0, [r7, #12]
 80003f2:	60b9      	str	r1, [r7, #8]
 80003f4:	607a      	str	r2, [r7, #4]
    request->num_headers = MAX_HEADERS;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2214      	movs	r2, #20
 80003fa:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

    int pret = phr_parse_request(
 80003fe:	687d      	ldr	r5, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	1d1e      	adds	r6, r3, #4
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3308      	adds	r3, #8
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	320c      	adds	r2, #12
 800040c:	6879      	ldr	r1, [r7, #4]
 800040e:	3110      	adds	r1, #16
        &request->method,
        &request->method_len,
        &request->path,
        &request->path_len,
        &request->minor_version,
        request->headers,
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	3014      	adds	r0, #20
    int pret = phr_parse_request(
 8000414:	687c      	ldr	r4, [r7, #4]
 8000416:	f504 74aa 	add.w	r4, r4, #340	; 0x154
 800041a:	f04f 0c00 	mov.w	ip, #0
 800041e:	f8cd c014 	str.w	ip, [sp, #20]
 8000422:	9404      	str	r4, [sp, #16]
 8000424:	9003      	str	r0, [sp, #12]
 8000426:	9102      	str	r1, [sp, #8]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	4633      	mov	r3, r6
 800042e:	462a      	mov	r2, r5
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f000 fe7c 	bl	8001130 <phr_parse_request>
 8000438:	6178      	str	r0, [r7, #20]
        &request->num_headers,
        0
    );

    return pret;
 800043a:	697b      	ldr	r3, [r7, #20]
}
 800043c:	4618      	mov	r0, r3
 800043e:	371c      	adds	r7, #28
 8000440:	46bd      	mov	sp, r7
 8000442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000444 <extract_query_param>:

void extract_query_param(char* dest, const HTTP_REQUEST* request, const char* prefix) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	size_t prefix_len = strlen(prefix);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff fe7b 	bl	800014c <strlen>
 8000456:	6178      	str	r0, [r7, #20]
	size_t len = request->path_len - prefix_len;
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	68da      	ldr	r2, [r3, #12]
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	1ad3      	subs	r3, r2, r3
 8000460:	613b      	str	r3, [r7, #16]
	memmove(dest, request->path + prefix_len, len);
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	4413      	add	r3, r2
 800046a:	693a      	ldr	r2, [r7, #16]
 800046c:	4619      	mov	r1, r3
 800046e:	68f8      	ldr	r0, [r7, #12]
 8000470:	f003 fb2e 	bl	8003ad0 <memmove>
	dest[len] = '\0';
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	4413      	add	r3, r2
 800047a:	2200      	movs	r2, #0
 800047c:	701a      	strb	r2, [r3, #0]
}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <generate_http_response>:

#include "http_response.h"

extern UART_HandleTypeDef huart1;

HTTP_RESPONSE generate_http_response(const char* header, const char* html_content) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b08c      	sub	sp, #48	; 0x30
 800048c:	af02      	add	r7, sp, #8
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]

	int html_len = (html_content != NULL) ? strlen(html_content) : 0;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d004      	beq.n	80004a4 <generate_http_response+0x1c>
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff fe56 	bl	800014c <strlen>
 80004a0:	4603      	mov	r3, r0
 80004a2:	e000      	b.n	80004a6 <generate_http_response+0x1e>
 80004a4:	2300      	movs	r3, #0
 80004a6:	627b      	str	r3, [r7, #36]	; 0x24
    int header_len = strlen(header);
 80004a8:	68b8      	ldr	r0, [r7, #8]
 80004aa:	f7ff fe4f 	bl	800014c <strlen>
 80004ae:	4603      	mov	r3, r0
 80004b0:	623b      	str	r3, [r7, #32]

    int response_size = header_len + html_len;
 80004b2:	6a3a      	ldr	r2, [r7, #32]
 80004b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b6:	4413      	add	r3, r2
 80004b8:	61fb      	str	r3, [r7, #28]
    char *response = calloc(1, response_size + 1 + 128);
 80004ba:	69fb      	ldr	r3, [r7, #28]
 80004bc:	3381      	adds	r3, #129	; 0x81
 80004be:	4619      	mov	r1, r3
 80004c0:	2001      	movs	r0, #1
 80004c2:	f003 fabb 	bl	8003a3c <calloc>
 80004c6:	4603      	mov	r3, r0
 80004c8:	61bb      	str	r3, [r7, #24]

    if (html_content != NULL) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d00a      	beq.n	80004e6 <generate_http_response+0x5e>
        snprintf(response, response_size + 1, header, html_len, html_content);
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	3301      	adds	r3, #1
 80004d4:	4619      	mov	r1, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	69b8      	ldr	r0, [r7, #24]
 80004e0:	f003 fdae 	bl	8004040 <sniprintf>
 80004e4:	e009      	b.n	80004fa <generate_http_response+0x72>
    } else {
        snprintf(response, response_size + 1, header, 0, "");
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	3301      	adds	r3, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <generate_http_response+0x94>)
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2300      	movs	r3, #0
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	69b8      	ldr	r0, [r7, #24]
 80004f6:	f003 fda3 	bl	8004040 <sniprintf>
    }

    HTTP_RESPONSE http_response = {.response = response, .content_lenght = response_size};
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	b29b      	uxth	r3, r3
 8000502:	82bb      	strh	r3, [r7, #20]
    return http_response;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	461a      	mov	r2, r3
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000510:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000514:	68f8      	ldr	r0, [r7, #12]
 8000516:	3728      	adds	r7, #40	; 0x28
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	080048b0 	.word	0x080048b0

08000520 <send_http_response>:

void send_http_response(HTTP_RESPONSE http_response) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	463b      	mov	r3, r7
 8000528:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart1, (const uint8_t *) http_response.response, http_response.content_lenght, HAL_MAX_DELAY);
 800052c:	6839      	ldr	r1, [r7, #0]
 800052e:	88ba      	ldrh	r2, [r7, #4]
 8000530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <send_http_response+0x24>)
 8000536:	f003 f815 	bl	8003564 <HAL_UART_Transmit>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200000ec 	.word	0x200000ec

08000548 <send_html_response>:

void send_html_response(const char *const header, const char* body) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
    HTTP_RESPONSE http_response = generate_http_response(header, body);
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff94 	bl	8000488 <generate_http_response>
    send_http_response(http_response);
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000568:	f7ff ffda 	bl	8000520 <send_http_response>
    free(http_response.response);
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fa96 	bl	8003aa0 <free>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <process_led_control>:
void handle_led_off(GPIO_PinState pin) {
	HAL_GPIO_WritePin(GPIOA, pin, GPIO_PIN_RESET);
	send_html_response(HTML_RESPONSE_NO_CONTENT_HEADER, NULL);
}

void process_led_control(const HTTP_REQUEST *const http_request) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	struct {
		const char *path;
		uint16_t pin;
		GPIO_PinState state;
	} commands[] = {
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <process_led_control+0x80>)
 8000586:	f107 040c 	add.w	r4, r7, #12
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800059c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{ "/led3_off", GPIO_PIN_6, GPIO_PIN_RESET },
		{ "/led4_on",  GPIO_PIN_7, GPIO_PIN_SET },
		{ "/led4_off", GPIO_PIN_7, GPIO_PIN_RESET },
	};

	for (int i = 0; i < sizeof(commands)/sizeof(commands[0]); i++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005a4:	e024      	b.n	80005f0 <process_led_control+0x74>
		if (is_path_match(commands[i].path, http_request)) {
 80005a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	3350      	adds	r3, #80	; 0x50
 80005ac:	443b      	add	r3, r7
 80005ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fed1 	bl	800035c <is_path_match>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d014      	beq.n	80005ea <process_led_control+0x6e>
			HAL_GPIO_WritePin(GPIOA, commands[i].pin, commands[i].state);
 80005c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	3350      	adds	r3, #80	; 0x50
 80005c6:	443b      	add	r3, r7
 80005c8:	f833 1c40 	ldrh.w	r1, [r3, #-64]
 80005cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	3350      	adds	r3, #80	; 0x50
 80005d2:	443b      	add	r3, r7
 80005d4:	f813 3c3e 	ldrb.w	r3, [r3, #-62]
 80005d8:	461a      	mov	r2, r3
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <process_led_control+0x84>)
 80005dc:	f001 fd70 	bl	80020c0 <HAL_GPIO_WritePin>
			send_html_response(HTML_RESPONSE_NO_CONTENT_HEADER, NULL);
 80005e0:	2100      	movs	r1, #0
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <process_led_control+0x88>)
 80005e4:	f7ff ffb0 	bl	8000548 <send_html_response>
 80005e8:	e005      	b.n	80005f6 <process_led_control+0x7a>
	for (int i = 0; i < sizeof(commands)/sizeof(commands[0]); i++) {
 80005ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ec:	3301      	adds	r3, #1
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80005f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005f2:	2b07      	cmp	r3, #7
 80005f4:	d9d7      	bls.n	80005a6 <process_led_control+0x2a>
			return;
		}
	}
}
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bdb0      	pop	{r4, r5, r7, pc}
 80005fc:	08004944 	.word	0x08004944
 8000600:	40010800 	.word	0x40010800
 8000604:	08004914 	.word	0x08004914

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fa6a 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f814 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8da 	bl	80007cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000618:	f000 f856 	bl	80006c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f882 	bl	8000724 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000620:	f000 f8aa 	bl	8000778 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000624:	f000 fe04 	bl	8001230 <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8000628:	f001 f80c 	bl	8001644 <ssd1306_FlipScreenVertically>
  ssd1306_Clear();
 800062c:	f001 f814 	bl	8001658 <ssd1306_Clear>
  ssd1306_SetColor(White);
 8000630:	2001      	movs	r0, #1
 8000632:	f000 fded 	bl	8001210 <ssd1306_SetColor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  http_handler();
 8000636:	f7ff fe67 	bl	8000308 <http_handler>
 800063a:	e7fc      	b.n	8000636 <main+0x2e>

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b090      	sub	sp, #64	; 0x40
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2228      	movs	r2, #40	; 0x28
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fa5a 	bl	8003b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2302      	movs	r3, #2
 8000672:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800067a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0318 	add.w	r3, r7, #24
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fb0d 	bl	8002ca4 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000690:	f000 f8e6 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fd7a 	bl	80031a8 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006ba:	f000 f8d1 	bl	8000860 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3740      	adds	r7, #64	; 0x40
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f001 fcf3 	bl	80020f0 <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f8a6 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000098 	.word	0x20000098
 800071c:	40005400 	.word	0x40005400
 8000720:	00061a80 	.word	0x00061a80

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART1_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART1_UART_Init+0x4c>)
 800075c:	f002 feb2 	bl	80034c4 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f87b 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000ec 	.word	0x200000ec
 8000774:	40013800 	.word	0x40013800

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_USART2_UART_Init+0x50>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f002 fe88 	bl	80034c4 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ba:	f000 f851 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000134 	.word	0x20000134
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0320 	and.w	r3, r3, #32
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a16      	ldr	r2, [pc, #88]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_GPIO_Init+0x8c>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	21f0      	movs	r1, #240	; 0xf0
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0x90>)
 800082e:	f001 fc47 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000832:	23f0      	movs	r3, #240	; 0xf0
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2302      	movs	r3, #2
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0x90>)
 800084a:	f001 fab5 	bl	8001db8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>

0800086a <findchar_fast>:
                                    "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
                                    "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
                                    "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

static const char *findchar_fast(const char *buf, const char *buf_end, const char *ranges, size_t ranges_size, int *found)
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
 8000876:	603b      	str	r3, [r7, #0]
    *found = 0;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
    /* suppress unused parameter warning */
    (void)buf_end;
    (void)ranges;
    (void)ranges_size;
#endif
    return buf;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <get_token_to_eol>:

static const char *get_token_to_eol(const char *buf, const char *buf_end, const char **token, size_t *token_len, int *ret)
{
 800088a:	b480      	push	{r7}
 800088c:	b087      	sub	sp, #28
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	603b      	str	r3, [r7, #0]
    const char *token_start = buf;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	617b      	str	r3, [r7, #20]
    buf = findchar_fast(buf, buf_end, ranges1, 6, &found);
    if (found)
        goto FOUND_CTL;
#else
    /* find non-printable char within the next 8 bytes, this is the hottest code; manually inlined */
    while (likely(buf_end - buf >= 8)) {
 800089c:	e095      	b.n	80009ca <get_token_to_eol+0x140>
    do {                                                                                                                           \
        if (unlikely(!IS_PRINTABLE_ASCII(*buf)))                                                                                   \
            goto NonPrintable;                                                                                                     \
        ++buf;                                                                                                                     \
    } while (0)
        DOIT();
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	3b20      	subs	r3, #32
 80008a4:	2b5e      	cmp	r3, #94	; 0x5e
 80008a6:	bf8c      	ite	hi
 80008a8:	2301      	movhi	r3, #1
 80008aa:	2300      	movls	r3, #0
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d15e      	bne.n	8000970 <get_token_to_eol+0xe6>
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60fb      	str	r3, [r7, #12]
        DOIT();
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3b20      	subs	r3, #32
 80008be:	2b5e      	cmp	r3, #94	; 0x5e
 80008c0:	bf8c      	ite	hi
 80008c2:	2301      	movhi	r3, #1
 80008c4:	2300      	movls	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d153      	bne.n	8000974 <get_token_to_eol+0xea>
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
        DOIT();
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3b20      	subs	r3, #32
 80008d8:	2b5e      	cmp	r3, #94	; 0x5e
 80008da:	bf8c      	ite	hi
 80008dc:	2301      	movhi	r3, #1
 80008de:	2300      	movls	r3, #0
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d148      	bne.n	8000978 <get_token_to_eol+0xee>
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
        DOIT();
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3b20      	subs	r3, #32
 80008f2:	2b5e      	cmp	r3, #94	; 0x5e
 80008f4:	bf8c      	ite	hi
 80008f6:	2301      	movhi	r3, #1
 80008f8:	2300      	movls	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d13d      	bne.n	800097c <get_token_to_eol+0xf2>
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
        DOIT();
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3b20      	subs	r3, #32
 800090c:	2b5e      	cmp	r3, #94	; 0x5e
 800090e:	bf8c      	ite	hi
 8000910:	2301      	movhi	r3, #1
 8000912:	2300      	movls	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d132      	bne.n	8000980 <get_token_to_eol+0xf6>
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
        DOIT();
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3b20      	subs	r3, #32
 8000926:	2b5e      	cmp	r3, #94	; 0x5e
 8000928:	bf8c      	ite	hi
 800092a:	2301      	movhi	r3, #1
 800092c:	2300      	movls	r3, #0
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d127      	bne.n	8000984 <get_token_to_eol+0xfa>
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
        DOIT();
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	3b20      	subs	r3, #32
 8000940:	2b5e      	cmp	r3, #94	; 0x5e
 8000942:	bf8c      	ite	hi
 8000944:	2301      	movhi	r3, #1
 8000946:	2300      	movls	r3, #0
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d11c      	bne.n	8000988 <get_token_to_eol+0xfe>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3301      	adds	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
        DOIT();
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3b20      	subs	r3, #32
 800095a:	2b5e      	cmp	r3, #94	; 0x5e
 800095c:	bf8c      	ite	hi
 800095e:	2301      	movhi	r3, #1
 8000960:	2300      	movls	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	d111      	bne.n	800098c <get_token_to_eol+0x102>
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
#undef DOIT
        continue;
 800096e:	e02c      	b.n	80009ca <get_token_to_eol+0x140>
        DOIT();
 8000970:	bf00      	nop
 8000972:	e00c      	b.n	800098e <get_token_to_eol+0x104>
        DOIT();
 8000974:	bf00      	nop
 8000976:	e00a      	b.n	800098e <get_token_to_eol+0x104>
        DOIT();
 8000978:	bf00      	nop
 800097a:	e008      	b.n	800098e <get_token_to_eol+0x104>
        DOIT();
 800097c:	bf00      	nop
 800097e:	e006      	b.n	800098e <get_token_to_eol+0x104>
        DOIT();
 8000980:	bf00      	nop
 8000982:	e004      	b.n	800098e <get_token_to_eol+0x104>
        DOIT();
 8000984:	bf00      	nop
 8000986:	e002      	b.n	800098e <get_token_to_eol+0x104>
        DOIT();
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <get_token_to_eol+0x104>
        DOIT();
 800098c:	bf00      	nop
    NonPrintable:
        if ((likely((unsigned char)*buf < '\040') && likely(*buf != '\011')) || unlikely(*buf == '\177')) {
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b1f      	cmp	r3, #31
 8000994:	bf94      	ite	ls
 8000996:	2301      	movls	r3, #1
 8000998:	2300      	movhi	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d008      	beq.n	80009b2 <get_token_to_eol+0x128>
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b09      	cmp	r3, #9
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d149      	bne.n	8000a46 <get_token_to_eol+0x1bc>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b7f      	cmp	r3, #127	; 0x7f
 80009b8:	bf0c      	ite	eq
 80009ba:	2301      	moveq	r3, #1
 80009bc:	2300      	movne	r3, #0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d140      	bne.n	8000a46 <get_token_to_eol+0x1bc>
            goto FOUND_CTL;
        }
        ++buf;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
    while (likely(buf_end - buf >= 8)) {
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	bfcc      	ite	gt
 80009d4:	2301      	movgt	r3, #1
 80009d6:	2300      	movle	r3, #0
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f47f af5f 	bne.w	800089e <get_token_to_eol+0x14>
    }
#endif
    for (;; ++buf) {
        CHECK_EOF();
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d105      	bne.n	80009f4 <get_token_to_eol+0x16a>
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	f06f 0201 	mvn.w	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	e06d      	b.n	8000ad0 <get_token_to_eol+0x246>
        if (unlikely(!IS_PRINTABLE_ASCII(*buf))) {
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3b20      	subs	r3, #32
 80009fa:	2b5e      	cmp	r3, #94	; 0x5e
 80009fc:	bf8c      	ite	hi
 80009fe:	2301      	movhi	r3, #1
 8000a00:	2300      	movls	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d01a      	beq.n	8000a3e <get_token_to_eol+0x1b4>
            if ((likely((unsigned char)*buf < '\040') && likely(*buf != '\011')) || unlikely(*buf == '\177')) {
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b1f      	cmp	r3, #31
 8000a0e:	bf94      	ite	ls
 8000a10:	2301      	movls	r3, #1
 8000a12:	2300      	movhi	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d008      	beq.n	8000a2c <get_token_to_eol+0x1a2>
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b09      	cmp	r3, #9
 8000a20:	bf14      	ite	ne
 8000a22:	2301      	movne	r3, #1
 8000a24:	2300      	moveq	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d10e      	bne.n	8000a4a <get_token_to_eol+0x1c0>
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b7f      	cmp	r3, #127	; 0x7f
 8000a32:	bf0c      	ite	eq
 8000a34:	2301      	moveq	r3, #1
 8000a36:	2300      	movne	r3, #0
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d105      	bne.n	8000a4a <get_token_to_eol+0x1c0>
    for (;; ++buf) {
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
        CHECK_EOF();
 8000a44:	e7cc      	b.n	80009e0 <get_token_to_eol+0x156>
            goto FOUND_CTL;
 8000a46:	bf00      	nop
 8000a48:	e000      	b.n	8000a4c <get_token_to_eol+0x1c2>
                goto FOUND_CTL;
 8000a4a:	bf00      	nop
            }
        }
    }
FOUND_CTL:
    if (likely(*buf == '\015')) {
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b0d      	cmp	r3, #13
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d020      	beq.n	8000aa0 <get_token_to_eol+0x216>
        ++buf;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	3301      	adds	r3, #1
 8000a62:	60fb      	str	r3, [r7, #12]
        EXPECT_CHAR('\012');
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d105      	bne.n	8000a78 <get_token_to_eol+0x1ee>
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	f06f 0201 	mvn.w	r2, #1
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	2300      	movs	r3, #0
 8000a76:	e02b      	b.n	8000ad0 <get_token_to_eol+0x246>
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60fa      	str	r2, [r7, #12]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b0a      	cmp	r3, #10
 8000a82:	d005      	beq.n	8000a90 <get_token_to_eol+0x206>
 8000a84:	6a3b      	ldr	r3, [r7, #32]
 8000a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e01f      	b.n	8000ad0 <get_token_to_eol+0x246>
        *token_len = buf - 2 - token_start;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	1e9a      	subs	r2, r3, #2
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e013      	b.n	8000ac8 <get_token_to_eol+0x23e>
    } else if (*buf == '\012') {
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d109      	bne.n	8000abc <get_token_to_eol+0x232>
        *token_len = buf - token_start;
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	601a      	str	r2, [r3, #0]
        ++buf;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	e005      	b.n	8000ac8 <get_token_to_eol+0x23e>
    } else {
        *ret = -1;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac2:	601a      	str	r2, [r3, #0]
        return NULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e003      	b.n	8000ad0 <get_token_to_eol+0x246>
    }
    *token = token_start;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	601a      	str	r2, [r3, #0]

    return buf;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <is_complete>:

static const char *is_complete(const char *buf, const char *buf_end, size_t last_len, int *ret)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b087      	sub	sp, #28
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	603b      	str	r3, [r7, #0]
    int ret_cnt = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
    buf = last_len < 3 ? buf : buf + last_len - 3;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d904      	bls.n	8000afc <is_complete+0x22>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	e000      	b.n	8000afe <is_complete+0x24>
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	60fb      	str	r3, [r7, #12]

    while (1) {
        CHECK_EOF();
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d105      	bne.n	8000b14 <is_complete+0x3a>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	f06f 0201 	mvn.w	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	e03e      	b.n	8000b92 <is_complete+0xb8>
        if (*buf == '\015') {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b0d      	cmp	r3, #13
 8000b1a:	d126      	bne.n	8000b6a <is_complete+0x90>
            ++buf;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
            CHECK_EOF();
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d105      	bne.n	8000b36 <is_complete+0x5c>
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	f06f 0201 	mvn.w	r2, #1
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	e02d      	b.n	8000b92 <is_complete+0xb8>
            EXPECT_CHAR('\012');
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d105      	bne.n	8000b4a <is_complete+0x70>
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	f06f 0201 	mvn.w	r2, #1
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	e023      	b.n	8000b92 <is_complete+0xb8>
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	60fa      	str	r2, [r7, #12]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b0a      	cmp	r3, #10
 8000b54:	d005      	beq.n	8000b62 <is_complete+0x88>
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e017      	b.n	8000b92 <is_complete+0xb8>
            ++ret_cnt;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e00f      	b.n	8000b8a <is_complete+0xb0>
        } else if (*buf == '\012') {
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b0a      	cmp	r3, #10
 8000b70:	d106      	bne.n	8000b80 <is_complete+0xa6>
            ++buf;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
            ++ret_cnt;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e004      	b.n	8000b8a <is_complete+0xb0>
        } else {
            ++buf;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
            ret_cnt = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
        }
        if (ret_cnt == 2) {
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d1b7      	bne.n	8000b00 <is_complete+0x26>
            return buf;
 8000b90:	68fb      	ldr	r3, [r7, #12]
        }
    }

    *ret = -2;
    return NULL;
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <parse_token>:
    } while (0)

/* returned pointer is always within [buf, buf_end), or null */
static const char *parse_token(const char *buf, const char *buf_end, const char **token, size_t *token_len, char next_char,
                               int *ret)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
 8000ba8:	603b      	str	r3, [r7, #0]
                                             ",,"     /* 0x2c */
                                             "//"     /* 0x2f */
                                             ":@"     /* 0x3a-0x40 */
                                             "[]"     /* 0x5b-0x5d */
                                             "{\xff"; /* 0x7b-0xff */
    const char *buf_start = buf;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	617b      	str	r3, [r7, #20]
    int found;
    buf = findchar_fast(buf, buf_end, ranges, sizeof(ranges) - 1, &found);
 8000bae:	f107 0310 	add.w	r3, r7, #16
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	4a21      	ldr	r2, [pc, #132]	; (8000c3c <parse_token+0xa0>)
 8000bb8:	68b9      	ldr	r1, [r7, #8]
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f7ff fe55 	bl	800086a <findchar_fast>
 8000bc0:	60f8      	str	r0, [r7, #12]
    if (!found) {
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <parse_token+0x40>
        CHECK_EOF();
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d105      	bne.n	8000bdc <parse_token+0x40>
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	f06f 0201 	mvn.w	r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e02b      	b.n	8000c34 <parse_token+0x98>
    }
    while (1) {
        if (*buf == next_char) {
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d01a      	beq.n	8000c1e <parse_token+0x82>
            break;
        } else if (!token_char_map[(unsigned char)*buf]) {
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <parse_token+0xa4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	7812      	ldrb	r2, [r2, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <parse_token+0x68>
            *ret = -1;
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bfe:	601a      	str	r2, [r3, #0]
            return NULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	e017      	b.n	8000c34 <parse_token+0x98>
        }
        ++buf;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	3301      	adds	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
        CHECK_EOF();
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d1e4      	bne.n	8000bdc <parse_token+0x40>
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	f06f 0201 	mvn.w	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e00a      	b.n	8000c34 <parse_token+0x98>
            break;
 8000c1e:	bf00      	nop
    }
    *token = buf_start;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	697a      	ldr	r2, [r7, #20]
 8000c24:	601a      	str	r2, [r3, #0]
    *token_len = buf - buf_start;
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	601a      	str	r2, [r3, #0]
    return buf;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	08005230 	.word	0x08005230
 8000c40:	20000008 	.word	0x20000008

08000c44 <parse_http_version>:

/* returned pointer is always within [buf, buf_end), or null */
static const char *parse_http_version(const char *buf, const char *buf_end, int *minor_version, int *ret)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
 8000c50:	603b      	str	r3, [r7, #0]
    /* we want at least [HTTP/1.<two chars>] to try to parse */
    if (buf_end - buf < 9) {
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b08      	cmp	r3, #8
 8000c5a:	dc05      	bgt.n	8000c68 <parse_http_version+0x24>
        *ret = -2;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f06f 0201 	mvn.w	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
        return NULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	e06d      	b.n	8000d44 <parse_http_version+0x100>
    }
    EXPECT_CHAR_NO_CHECK('H');
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60fa      	str	r2, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b48      	cmp	r3, #72	; 0x48
 8000c72:	d005      	beq.n	8000c80 <parse_http_version+0x3c>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e061      	b.n	8000d44 <parse_http_version+0x100>
    EXPECT_CHAR_NO_CHECK('T');
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60fa      	str	r2, [r7, #12]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b54      	cmp	r3, #84	; 0x54
 8000c8a:	d005      	beq.n	8000c98 <parse_http_version+0x54>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	2300      	movs	r3, #0
 8000c96:	e055      	b.n	8000d44 <parse_http_version+0x100>
    EXPECT_CHAR_NO_CHECK('T');
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b54      	cmp	r3, #84	; 0x54
 8000ca2:	d005      	beq.n	8000cb0 <parse_http_version+0x6c>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	2300      	movs	r3, #0
 8000cae:	e049      	b.n	8000d44 <parse_http_version+0x100>
    EXPECT_CHAR_NO_CHECK('P');
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60fa      	str	r2, [r7, #12]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b50      	cmp	r3, #80	; 0x50
 8000cba:	d005      	beq.n	8000cc8 <parse_http_version+0x84>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e03d      	b.n	8000d44 <parse_http_version+0x100>
    EXPECT_CHAR_NO_CHECK('/');
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	1c5a      	adds	r2, r3, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b2f      	cmp	r3, #47	; 0x2f
 8000cd2:	d005      	beq.n	8000ce0 <parse_http_version+0x9c>
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e031      	b.n	8000d44 <parse_http_version+0x100>
    EXPECT_CHAR_NO_CHECK('1');
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60fa      	str	r2, [r7, #12]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b31      	cmp	r3, #49	; 0x31
 8000cea:	d005      	beq.n	8000cf8 <parse_http_version+0xb4>
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e025      	b.n	8000d44 <parse_http_version+0x100>
    EXPECT_CHAR_NO_CHECK('.');
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	60fa      	str	r2, [r7, #12]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b2e      	cmp	r3, #46	; 0x2e
 8000d02:	d005      	beq.n	8000d10 <parse_http_version+0xcc>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e019      	b.n	8000d44 <parse_http_version+0x100>
    PARSE_INT(minor_version, 1);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b2f      	cmp	r3, #47	; 0x2f
 8000d16:	d903      	bls.n	8000d20 <parse_http_version+0xdc>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b39      	cmp	r3, #57	; 0x39
 8000d1e:	d908      	bls.n	8000d32 <parse_http_version+0xee>
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e008      	b.n	8000d44 <parse_http_version+0x100>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	60fa      	str	r2, [r7, #12]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	601a      	str	r2, [r3, #0]
    return buf;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr

08000d4e <parse_headers>:

static const char *parse_headers(const char *buf, const char *buf_end, struct phr_header *headers, size_t *num_headers,
                                 size_t max_headers, int *ret)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b08a      	sub	sp, #40	; 0x28
 8000d52:	af02      	add	r7, sp, #8
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
    for (;; ++*num_headers) {
        CHECK_EOF();
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d105      	bne.n	8000d70 <parse_headers+0x22>
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d66:	f06f 0201 	mvn.w	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e0d1      	b.n	8000f14 <parse_headers+0x1c6>
        if (*buf == '\015') {
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b0d      	cmp	r3, #13
 8000d76:	d119      	bne.n	8000dac <parse_headers+0x5e>
            ++buf;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
            EXPECT_CHAR('\012');
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d105      	bne.n	8000d92 <parse_headers+0x44>
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	f06f 0201 	mvn.w	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e0c0      	b.n	8000f14 <parse_headers+0x1c6>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	60fa      	str	r2, [r7, #12]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	f000 80b8 	beq.w	8000f10 <parse_headers+0x1c2>
 8000da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	2300      	movs	r3, #0
 8000daa:	e0b3      	b.n	8000f14 <parse_headers+0x1c6>
            break;
        } else if (*buf == '\012') {
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b0a      	cmp	r3, #10
 8000db2:	d103      	bne.n	8000dbc <parse_headers+0x6e>
            ++buf;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
            break;
 8000dba:	e0aa      	b.n	8000f12 <parse_headers+0x1c4>
        }
        if (*num_headers == max_headers) {
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d105      	bne.n	8000dd2 <parse_headers+0x84>
            *ret = -1;
 8000dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	601a      	str	r2, [r3, #0]
            return NULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e0a0      	b.n	8000f14 <parse_headers+0x1c6>
        }
        if (!(*num_headers != 0 && (*buf == ' ' || *buf == '\t'))) {
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <parse_headers+0x9c>
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b20      	cmp	r3, #32
 8000de0:	d048      	beq.n	8000e74 <parse_headers+0x126>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b09      	cmp	r3, #9
 8000de8:	d044      	beq.n	8000e74 <parse_headers+0x126>
            /* parsing name, but do not discard SP before colon, see
             * http://www.mozilla.org/security/announce/2006/mfsa2006-33.html */
            if ((buf = parse_token(buf, buf_end, &headers[*num_headers].name, &headers[*num_headers].name_len, ':', ret)) == NULL) {
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	1d1a      	adds	r2, r3, #4
 8000e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	233a      	movs	r3, #58	; 0x3a
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f7ff fec3 	bl	8000b9c <parse_token>
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <parse_headers+0xd4>
                return NULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e078      	b.n	8000f14 <parse_headers+0x1c6>
            }
            if (headers[*num_headers].name_len == 0) {
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d105      	bne.n	8000e3e <parse_headers+0xf0>
                *ret = -1;
 8000e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e38:	601a      	str	r2, [r3, #0]
                return NULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e06a      	b.n	8000f14 <parse_headers+0x1c6>
            }
            ++buf;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
            for (;; ++buf) {
                CHECK_EOF();
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d105      	bne.n	8000e58 <parse_headers+0x10a>
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	f06f 0201 	mvn.w	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	2300      	movs	r3, #0
 8000e56:	e05d      	b.n	8000f14 <parse_headers+0x1c6>
                if (!(*buf == ' ' || *buf == '\t')) {
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b20      	cmp	r3, #32
 8000e5e:	d003      	beq.n	8000e68 <parse_headers+0x11a>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b09      	cmp	r3, #9
 8000e66:	d103      	bne.n	8000e70 <parse_headers+0x122>
            for (;; ++buf) {
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
                CHECK_EOF();
 8000e6e:	e7e9      	b.n	8000e44 <parse_headers+0xf6>
                    break;
 8000e70:	bf00      	nop
        if (!(*num_headers != 0 && (*buf == ' ' || *buf == '\t'))) {
 8000e72:	e00d      	b.n	8000e90 <parse_headers+0x142>
                }
            }
        } else {
            headers[*num_headers].name = NULL;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
            headers[*num_headers].name_len = 0;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
        }
        const char *value;
        size_t value_len;
        if ((buf = get_token_to_eol(buf, buf_end, &value, &value_len, ret)) == NULL) {
 8000e90:	f107 0110 	add.w	r1, r7, #16
 8000e94:	f107 0214 	add.w	r2, r7, #20
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f7ff fcf2 	bl	800088a <get_token_to_eol>
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d101      	bne.n	8000eb2 <parse_headers+0x164>
            return NULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e030      	b.n	8000f14 <parse_headers+0x1c6>
        }
        /* remove trailing SPs and HTABs */
        const char *value_end = value + value_len;
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	61fb      	str	r3, [r7, #28]
        for (; value_end != value; --value_end) {
 8000eba:	e00c      	b.n	8000ed6 <parse_headers+0x188>
            const char c = *(value_end - 1);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8000ec2:	76fb      	strb	r3, [r7, #27]
            if (!(c == ' ' || c == '\t')) {
 8000ec4:	7efb      	ldrb	r3, [r7, #27]
 8000ec6:	2b20      	cmp	r3, #32
 8000ec8:	d002      	beq.n	8000ed0 <parse_headers+0x182>
 8000eca:	7efb      	ldrb	r3, [r7, #27]
 8000ecc:	2b09      	cmp	r3, #9
 8000ece:	d107      	bne.n	8000ee0 <parse_headers+0x192>
        for (; value_end != value; --value_end) {
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d1ee      	bne.n	8000ebc <parse_headers+0x16e>
 8000ede:	e000      	b.n	8000ee2 <parse_headers+0x194>
                break;
 8000ee0:	bf00      	nop
            }
        }
        headers[*num_headers].value = value;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	609a      	str	r2, [r3, #8]
        headers[*num_headers].value_len = value_end - value;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	1ad1      	subs	r1, r2, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	4413      	add	r3, r2
 8000f00:	460a      	mov	r2, r1
 8000f02:	60da      	str	r2, [r3, #12]
    for (;; ++*num_headers) {
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e725      	b.n	8000d5c <parse_headers+0xe>
            break;
 8000f10:	bf00      	nop
    }
    return buf;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <parse_request>:

static const char *parse_request(const char *buf, const char *buf_end, const char **method, size_t *method_len, const char **path,
                                 size_t *path_len, int *minor_version, struct phr_header *headers, size_t *num_headers,
                                 size_t max_headers, int *ret)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	603b      	str	r3, [r7, #0]
    /* skip first empty line (some clients add CRLF after POST content) */
    CHECK_EOF();
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d105      	bne.n	8000f3e <parse_request+0x22>
 8000f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f34:	f06f 0201 	mvn.w	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e0f1      	b.n	8001122 <parse_request+0x206>
    if (*buf == '\015') {
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b0d      	cmp	r3, #13
 8000f44:	d118      	bne.n	8000f78 <parse_request+0x5c>
        ++buf;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
        EXPECT_CHAR('\012');
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d105      	bne.n	8000f60 <parse_request+0x44>
 8000f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f56:	f06f 0201 	mvn.w	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e0e0      	b.n	8001122 <parse_request+0x206>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60fa      	str	r2, [r7, #12]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b0a      	cmp	r3, #10
 8000f6a:	d00c      	beq.n	8000f86 <parse_request+0x6a>
 8000f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	e0d4      	b.n	8001122 <parse_request+0x206>
    } else if (*buf == '\012') {
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b0a      	cmp	r3, #10
 8000f7e:	d102      	bne.n	8000f86 <parse_request+0x6a>
        ++buf;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
    }

    /* parse request line */
    if ((buf = parse_token(buf, buf_end, method, method_len, ' ', ret)) == NULL) {
 8000f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	68b9      	ldr	r1, [r7, #8]
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f7ff fe01 	bl	8000b9c <parse_token>
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <parse_request+0x8a>
        return NULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e0bd      	b.n	8001122 <parse_request+0x206>
    }
    do {
        ++buf;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
        CHECK_EOF();
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d105      	bne.n	8000fc0 <parse_request+0xa4>
 8000fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb6:	f06f 0201 	mvn.w	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e0b0      	b.n	8001122 <parse_request+0x206>
    } while (*buf == ' ');
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b20      	cmp	r3, #32
 8000fc6:	d0ee      	beq.n	8000fa6 <parse_request+0x8a>
    ADVANCE_TOKEN(*path, *path_len);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	4a55      	ldr	r2, [pc, #340]	; (800112c <parse_request+0x210>)
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff fc46 	bl	800086a <findchar_fast>
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <parse_request+0xde>
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d105      	bne.n	8000ffa <parse_request+0xde>
 8000fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff0:	f06f 0201 	mvn.w	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e093      	b.n	8001122 <parse_request+0x206>
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b20      	cmp	r3, #32
 8001000:	d024      	beq.n	800104c <parse_request+0x130>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3b20      	subs	r3, #32
 8001008:	2b5e      	cmp	r3, #94	; 0x5e
 800100a:	bf8c      	ite	hi
 800100c:	2301      	movhi	r3, #1
 800100e:	2300      	movls	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d00d      	beq.n	8001032 <parse_request+0x116>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b1f      	cmp	r3, #31
 800101c:	d903      	bls.n	8001026 <parse_request+0x10a>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b7f      	cmp	r3, #127	; 0x7f
 8001024:	d105      	bne.n	8001032 <parse_request+0x116>
 8001026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	e077      	b.n	8001122 <parse_request+0x206>
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fa      	ldr	r2, [r7, #12]
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	429a      	cmp	r2, r3
 800103e:	d1dc      	bne.n	8000ffa <parse_request+0xde>
 8001040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001042:	f06f 0201 	mvn.w	r2, #1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	e06a      	b.n	8001122 <parse_request+0x206>
 800104c:	bf00      	nop
 800104e:	6a3b      	ldr	r3, [r7, #32]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	461a      	mov	r2, r3
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	601a      	str	r2, [r3, #0]
    do {
        ++buf;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
        CHECK_EOF();
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	429a      	cmp	r2, r3
 800106c:	d105      	bne.n	800107a <parse_request+0x15e>
 800106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001070:	f06f 0201 	mvn.w	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	2300      	movs	r3, #0
 8001078:	e053      	b.n	8001122 <parse_request+0x206>
    } while (*buf == ' ');
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b20      	cmp	r3, #32
 8001080:	d0ee      	beq.n	8001060 <parse_request+0x144>
    if (*method_len == 0 || *path_len == 0) {
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <parse_request+0x176>
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <parse_request+0x182>
        *ret = -1;
 8001092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001098:	601a      	str	r2, [r3, #0]
        return NULL;
 800109a:	2300      	movs	r3, #0
 800109c:	e041      	b.n	8001122 <parse_request+0x206>
    }
    if ((buf = parse_http_version(buf, buf_end, minor_version, ret)) == NULL) {
 800109e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fdcd 	bl	8000c44 <parse_http_version>
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <parse_request+0x19a>
        return NULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e035      	b.n	8001122 <parse_request+0x206>
    }
    if (*buf == '\015') {
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b0d      	cmp	r3, #13
 80010bc:	d118      	bne.n	80010f0 <parse_request+0x1d4>
        ++buf;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3301      	adds	r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
        EXPECT_CHAR('\012');
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d105      	bne.n	80010d8 <parse_request+0x1bc>
 80010cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ce:	f06f 0201 	mvn.w	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	e024      	b.n	8001122 <parse_request+0x206>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	60fa      	str	r2, [r7, #12]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	d013      	beq.n	800110c <parse_request+0x1f0>
 80010e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	2300      	movs	r3, #0
 80010ee:	e018      	b.n	8001122 <parse_request+0x206>
    } else if (*buf == '\012') {
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d103      	bne.n	8001100 <parse_request+0x1e4>
        ++buf;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e005      	b.n	800110c <parse_request+0x1f0>
    } else {
        *ret = -1;
 8001100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001106:	601a      	str	r2, [r3, #0]
        return NULL;
 8001108:	2300      	movs	r3, #0
 800110a:	e00a      	b.n	8001122 <parse_request+0x206>
    }

    return parse_headers(buf, buf_end, headers, num_headers, max_headers, ret);
 800110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff fe17 	bl	8000d4e <parse_headers>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08005250 	.word	0x08005250

08001130 <phr_parse_request>:

int phr_parse_request(const char *buf_start, size_t len, const char **method, size_t *method_len, const char **path,
                      size_t *path_len, int *minor_version, struct phr_header *headers, size_t *num_headers, size_t last_len)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b090      	sub	sp, #64	; 0x40
 8001134:	af08      	add	r7, sp, #32
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	603b      	str	r3, [r7, #0]
    const char *buf = buf_start, *buf_end = buf_start + len;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
    size_t max_headers = *num_headers;
 800114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	617b      	str	r3, [r7, #20]
    int r;

    *method = NULL;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
    *method_len = 0;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
    *path = NULL;
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
    *path_len = 0;
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
    *minor_version = -1;
 8001168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800116e:	601a      	str	r2, [r3, #0]
    *num_headers = 0;
 8001170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    /* if last_len != 0, check if the request is complete (a fast countermeasure
       againt slowloris */
    if (last_len != 0 && is_complete(buf, buf_end, last_len, &r) == NULL) {
 8001176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <phr_parse_request+0x64>
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	69f8      	ldr	r0, [r7, #28]
 8001186:	f7ff fca8 	bl	8000ada <is_complete>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <phr_parse_request+0x64>
        return r;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	e01d      	b.n	80011d0 <phr_parse_request+0xa0>
    }

    if ((buf = parse_request(buf, buf_end, method, method_len, path, path_len, minor_version, headers, num_headers, max_headers,
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	9306      	str	r3, [sp, #24]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	9305      	str	r3, [sp, #20]
 800119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a0:	9304      	str	r3, [sp, #16]
 80011a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a4:	9303      	str	r3, [sp, #12]
 80011a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	69f8      	ldr	r0, [r7, #28]
 80011ba:	f7ff feaf 	bl	8000f1c <parse_request>
 80011be:	61f8      	str	r0, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <phr_parse_request+0x9a>
                             &r)) == NULL) {
        return r;
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	e002      	b.n	80011d0 <phr_parse_request+0xa0>
    }

    return (int)(buf - buf_start);
 80011ca:	69fa      	ldr	r2, [r7, #28]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	1ad3      	subs	r3, r2, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	2340      	movs	r3, #64	; 0x40
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <ssd1306_GetWidth>:
/* CODE END Private functions */


/* CODE BEGIN Public functions */
uint16_t ssd1306_GetWidth(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 80011f8:	2380      	movs	r3, #128	; 0x80
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <ssd1306_GetHeight>:


uint16_t ssd1306_GetHeight(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8001206:	2340      	movs	r3, #64	; 0x40
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <ssd1306_SetColor>:
	return SSD1306.Color;
}


void ssd1306_SetColor(SSD1306_COLOR color)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
	SSD1306.Color = color;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <ssd1306_SetColor+0x1c>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	7153      	strb	r3, [r2, #5]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000017c 	.word	0x2000017c

08001230 <ssd1306_Init>:


//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	2205      	movs	r2, #5
 800123a:	2178      	movs	r1, #120	; 0x78
 800123c:	4846      	ldr	r0, [pc, #280]	; (8001358 <ssd1306_Init+0x128>)
 800123e:	f001 f995 	bl	800256c <HAL_I2C_IsDeviceReady>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8001248:	4b44      	ldr	r3, [pc, #272]	; (800135c <ssd1306_Init+0x12c>)
 800124a:	2200      	movs	r2, #0
 800124c:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 800124e:	2300      	movs	r3, #0
 8001250:	e07f      	b.n	8001352 <ssd1306_Init+0x122>
	}


	// Wait for the screen to boot
	HAL_Delay(100);
 8001252:	2064      	movs	r0, #100	; 0x64
 8001254:	f000 fca8 	bl	8001ba8 <HAL_Delay>


	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8001258:	20ae      	movs	r0, #174	; 0xae
 800125a:	f000 fa09 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800125e:	20d5      	movs	r0, #213	; 0xd5
 8001260:	f000 fa06 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001264:	20f0      	movs	r0, #240	; 0xf0
 8001266:	f000 fa03 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 800126a:	20a8      	movs	r0, #168	; 0xa8
 800126c:	f000 fa00 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8001270:	f7ff ffb9 	bl	80011e6 <height>
 8001274:	4603      	mov	r3, r0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9f7 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8001282:	20d3      	movs	r0, #211	; 0xd3
 8001284:	f000 f9f4 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f000 f9f1 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 800128e:	2040      	movs	r0, #64	; 0x40
 8001290:	f000 f9ee 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001294:	208d      	movs	r0, #141	; 0x8d
 8001296:	f000 f9eb 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 800129a:	2014      	movs	r0, #20
 800129c:	f000 f9e8 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 80012a0:	2020      	movs	r0, #32
 80012a2:	f000 f9e5 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f9e2 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 80012ac:	20a0      	movs	r0, #160	; 0xa0
 80012ae:	f000 f9df 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 80012b2:	20c0      	movs	r0, #192	; 0xc0
 80012b4:	f000 f9dc 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 80012b8:	20da      	movs	r0, #218	; 0xda
 80012ba:	f000 f9d9 	bl	8001670 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80012be:	4b28      	ldr	r3, [pc, #160]	; (8001360 <ssd1306_Init+0x130>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 80012c6:	2012      	movs	r0, #18
 80012c8:	f000 f9d2 	bl	8001670 <ssd1306_WriteCommand>
 80012cc:	e006      	b.n	80012dc <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80012ce:	4b24      	ldr	r3, [pc, #144]	; (8001360 <ssd1306_Init+0x130>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d102      	bne.n	80012dc <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f000 f9ca 	bl	8001670 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETCONTRAST);
 80012dc:	2081      	movs	r0, #129	; 0x81
 80012de:	f000 f9c7 	bl	8001670 <ssd1306_WriteCommand>


	if (display_geometry == GEOMETRY_128_64)
 80012e2:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <ssd1306_Init+0x130>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d103      	bne.n	80012f2 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 80012ea:	20cf      	movs	r0, #207	; 0xcf
 80012ec:	f000 f9c0 	bl	8001670 <ssd1306_WriteCommand>
 80012f0:	e006      	b.n	8001300 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <ssd1306_Init+0x130>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d102      	bne.n	8001300 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 80012fa:	208f      	movs	r0, #143	; 0x8f
 80012fc:	f000 f9b8 	bl	8001670 <ssd1306_WriteCommand>
	}


	ssd1306_WriteCommand(SETPRECHARGE);
 8001300:	20d9      	movs	r0, #217	; 0xd9
 8001302:	f000 f9b5 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8001306:	20f1      	movs	r0, #241	; 0xf1
 8001308:	f000 f9b2 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 800130c:	20db      	movs	r0, #219	; 0xdb
 800130e:	f000 f9af 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8001312:	2040      	movs	r0, #64	; 0x40
 8001314:	f000 f9ac 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8001318:	20a4      	movs	r0, #164	; 0xa4
 800131a:	f000 f9a9 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 800131e:	20a6      	movs	r0, #166	; 0xa6
 8001320:	f000 f9a6 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8001324:	202e      	movs	r0, #46	; 0x2e
 8001326:	f000 f9a3 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 800132a:	20af      	movs	r0, #175	; 0xaf
 800132c:	f000 f9a0 	bl	8001670 <ssd1306_WriteCommand>


	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <ssd1306_Init+0x12c>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <ssd1306_Init+0x12c>)
 8001338:	2200      	movs	r2, #0
 800133a:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = Black;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <ssd1306_Init+0x12c>)
 800133e:	2200      	movs	r2, #0
 8001340:	715a      	strb	r2, [r3, #5]


	// Clear screen
	ssd1306_Clear();
 8001342:	f000 f989 	bl	8001658 <ssd1306_Clear>


	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001346:	f000 f80d 	bl	8001364 <ssd1306_UpdateScreen>


	SSD1306.Initialized = 1;
 800134a:	4b04      	ldr	r3, [pc, #16]	; (800135c <ssd1306_Init+0x12c>)
 800134c:	2201      	movs	r2, #1
 800134e:	719a      	strb	r2, [r3, #6]


	/* Return OK */
	return 1;
 8001350:	2301      	movs	r3, #1
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000098 	.word	0x20000098
 800135c:	2000017c 	.word	0x2000017c
 8001360:	20000584 	.word	0x20000584

08001364 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8001364:	b590      	push	{r4, r7, lr}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
	uint8_t i;


	for (i = 0; i < 8; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	71fb      	strb	r3, [r7, #7]
 800136e:	e019      	b.n	80013a4 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	3b50      	subs	r3, #80	; 0x50
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f97a 	bl	8001670 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f977 	bl	8001670 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8001382:	2010      	movs	r0, #16
 8001384:	f000 f974 	bl	8001670 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	01db      	lsls	r3, r3, #7
 800138c:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <ssd1306_UpdateScreen+0x50>)
 800138e:	189c      	adds	r4, r3, r2
 8001390:	f7ff ff22 	bl	80011d8 <width>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4620      	mov	r0, r4
 800139a:	f000 f981 	bl	80016a0 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3301      	adds	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b07      	cmp	r3, #7
 80013a8:	d9e2      	bls.n	8001370 <ssd1306_UpdateScreen+0xc>
	}
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	20000184 	.word	0x20000184

080013b8 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
	SSD1306_COLOR color = SSD1306.Color;
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <ssd1306_DrawPixel+0xe4>)
 80013ca:	795b      	ldrb	r3, [r3, #5]
 80013cc:	73fb      	strb	r3, [r7, #15]


	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	b29c      	uxth	r4, r3
 80013d2:	f7ff ff0f 	bl	80011f4 <ssd1306_GetWidth>
 80013d6:	4603      	mov	r3, r0
 80013d8:	429c      	cmp	r4, r3
 80013da:	d25a      	bcs.n	8001492 <ssd1306_DrawPixel+0xda>
 80013dc:	79bb      	ldrb	r3, [r7, #6]
 80013de:	b29c      	uxth	r4, r3
 80013e0:	f7ff ff0f 	bl	8001202 <ssd1306_GetHeight>
 80013e4:	4603      	mov	r3, r0
 80013e6:	429c      	cmp	r4, r3
 80013e8:	d253      	bcs.n	8001492 <ssd1306_DrawPixel+0xda>
		return;
	}


	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <ssd1306_DrawPixel+0xe4>)
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <ssd1306_DrawPixel+0x48>
	{
		color = (SSD1306_COLOR) !color;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	73fb      	strb	r3, [r7, #15]
	}


	// Draw in the right color
	if (color == White)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d121      	bne.n	800144a <ssd1306_DrawPixel+0x92>
	{
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001406:	79fc      	ldrb	r4, [r7, #7]
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	b2dd      	uxtb	r5, r3
 800140e:	462e      	mov	r6, r5
 8001410:	f7ff fee2 	bl	80011d8 <width>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	4603      	mov	r3, r0
 800141a:	fb06 f303 	mul.w	r3, r6, r3
 800141e:	4423      	add	r3, r4
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <ssd1306_DrawPixel+0xe8>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	b25a      	sxtb	r2, r3
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	b25b      	sxtb	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b259      	sxtb	r1, r3
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	462b      	mov	r3, r5
 800143c:	fb00 f303 	mul.w	r3, r0, r3
 8001440:	4413      	add	r3, r2
 8001442:	b2c9      	uxtb	r1, r1
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <ssd1306_DrawPixel+0xe8>)
 8001446:	54d1      	strb	r1, [r2, r3]
 8001448:	e024      	b.n	8001494 <ssd1306_DrawPixel+0xdc>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 800144a:	79fc      	ldrb	r4, [r7, #7]
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	b2dd      	uxtb	r5, r3
 8001452:	462e      	mov	r6, r5
 8001454:	f7ff fec0 	bl	80011d8 <width>
 8001458:	4603      	mov	r3, r0
 800145a:	4618      	mov	r0, r3
 800145c:	4603      	mov	r3, r0
 800145e:	fb06 f303 	mul.w	r3, r6, r3
 8001462:	4423      	add	r3, r4
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <ssd1306_DrawPixel+0xe8>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	b25a      	sxtb	r2, r3
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	b25b      	sxtb	r3, r3
 800147c:	4013      	ands	r3, r2
 800147e:	b259      	sxtb	r1, r3
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	462b      	mov	r3, r5
 8001484:	fb00 f303 	mul.w	r3, r0, r3
 8001488:	4413      	add	r3, r2
 800148a:	b2c9      	uxtb	r1, r1
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <ssd1306_DrawPixel+0xe8>)
 800148e:	54d1      	strb	r1, [r2, r3]
 8001490:	e000      	b.n	8001494 <ssd1306_DrawPixel+0xdc>
		return;
 8001492:	bf00      	nop
	}
}
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	bf00      	nop
 800149c:	2000017c 	.word	0x2000017c
 80014a0:	20000184 	.word	0x20000184

080014a4 <ssd1306_WriteChar>:
	}
}


char ssd1306_WriteChar(char ch, FontDef Font)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	e883 0006 	stmia.w	r3, {r1, r2}
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
	uint32_t i, b, j;


	// Check remaining space on current line
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 80014b4:	f7ff fe90 	bl	80011d8 <width>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <ssd1306_WriteChar+0x120>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	793b      	ldrb	r3, [r7, #4]
 80014c4:	440b      	add	r3, r1
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dd0a      	ble.n	80014e0 <ssd1306_WriteChar+0x3c>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 80014ca:	f7ff fe8c 	bl	80011e6 <height>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <ssd1306_WriteChar+0x120>)
 80014d4:	885b      	ldrh	r3, [r3, #2]
 80014d6:	4619      	mov	r1, r3
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	440b      	add	r3, r1
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 80014dc:	429a      	cmp	r2, r3
 80014de:	dc01      	bgt.n	80014e4 <ssd1306_WriteChar+0x40>
	{
		// Not enough space on current line
		return 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	e06a      	b.n	80015ba <ssd1306_WriteChar+0x116>
	}


	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	e059      	b.n	800159e <ssd1306_WriteChar+0xfa>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	3b20      	subs	r3, #32
 80014f0:	7979      	ldrb	r1, [r7, #5]
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	440b      	add	r3, r1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	e041      	b.n	800158e <ssd1306_WriteChar+0xea>
		{
			if ((b << j) & 0x8000)
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d011      	beq.n	800153e <ssd1306_WriteChar+0x9a>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <ssd1306_WriteChar+0x120>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b2d8      	uxtb	r0, r3
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <ssd1306_WriteChar+0x120>)
 800152a:	885b      	ldrh	r3, [r3, #2]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4413      	add	r3, r2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff ff3e 	bl	80013b8 <ssd1306_DrawPixel>
 800153c:	e024      	b.n	8001588 <ssd1306_WriteChar+0xe4>
			}
			else
			{
				SSD1306.Color = !SSD1306.Color;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <ssd1306_WriteChar+0x120>)
 8001540:	795b      	ldrb	r3, [r3, #5]
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <ssd1306_WriteChar+0x120>)
 8001550:	715a      	strb	r2, [r3, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <ssd1306_WriteChar+0x120>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2d8      	uxtb	r0, r3
 8001560:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <ssd1306_WriteChar+0x120>)
 8001562:	885b      	ldrh	r3, [r3, #2]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff ff22 	bl	80013b8 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <ssd1306_WriteChar+0x120>)
 8001576:	795b      	ldrb	r3, [r3, #5]
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	4b0f      	ldr	r3, [pc, #60]	; (80015c4 <ssd1306_WriteChar+0x120>)
 8001586:	715a      	strb	r2, [r3, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	3301      	adds	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	793b      	ldrb	r3, [r7, #4]
 8001590:	461a      	mov	r2, r3
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	4293      	cmp	r3, r2
 8001596:	d3b8      	bcc.n	800150a <ssd1306_WriteChar+0x66>
	for (i = 0; i < Font.FontHeight; i++)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	3301      	adds	r3, #1
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	461a      	mov	r2, r3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d3a0      	bcc.n	80014ea <ssd1306_WriteChar+0x46>
		}
	}


	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <ssd1306_WriteChar+0x120>)
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	793b      	ldrb	r3, [r7, #4]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <ssd1306_WriteChar+0x120>)
 80015b6:	801a      	strh	r2, [r3, #0]


	// Return written char for validation
	return ch;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000017c 	.word	0x2000017c

080015c8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	e883 0006 	stmia.w	r3, {r1, r2}
	// Write until null-byte
	while (*str)
 80015d6:	e012      	b.n	80015fe <ssd1306_WriteString+0x36>
	{
		if (ssd1306_WriteChar(*str, Font) != *str)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	7818      	ldrb	r0, [r3, #0]
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	e893 0006 	ldmia.w	r3, {r1, r2}
 80015e2:	f7ff ff5f 	bl	80014a4 <ssd1306_WriteChar>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d002      	beq.n	80015f8 <ssd1306_WriteString+0x30>
		{
			// Char could not be written
			return *str;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	e008      	b.n	800160a <ssd1306_WriteString+0x42>
		}


		// Next char
		str++;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
	while (*str)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1e8      	bne.n	80015d8 <ssd1306_WriteString+0x10>
	}


	// Everything ok
	return *str;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	781b      	ldrb	r3, [r3, #0]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	460a      	mov	r2, r1
 800161e:	71fb      	strb	r3, [r7, #7]
 8001620:	4613      	mov	r3, r2
 8001622:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <ssd1306_SetCursor+0x2c>)
 800162a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 800162c:	79bb      	ldrb	r3, [r7, #6]
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <ssd1306_SetCursor+0x2c>)
 8001632:	805a      	strh	r2, [r3, #2]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	2000017c 	.word	0x2000017c

08001644 <ssd1306_FlipScreenVertically>:
	ssd1306_WriteCommand(COMSCANINC);           //Reset screen rotation or mirroring
}


void ssd1306_FlipScreenVertically()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8001648:	20a1      	movs	r0, #161	; 0xa1
 800164a:	f000 f811 	bl	8001670 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 800164e:	20c8      	movs	r0, #200	; 0xc8
 8001650:	f000 f80e 	bl	8001670 <ssd1306_WriteCommand>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <ssd1306_Clear>:
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}


void ssd1306_Clear()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 800165c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001660:	2100      	movs	r1, #0
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <ssd1306_Clear+0x14>)
 8001664:	f002 fa4e 	bl	8003b04 <memset>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000184 	.word	0x20000184

08001670 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af04      	add	r7, sp, #16
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800167a:	230a      	movs	r3, #10
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	2301      	movs	r3, #1
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2301      	movs	r3, #1
 8001688:	2200      	movs	r2, #0
 800168a:	2178      	movs	r1, #120	; 0x78
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <ssd1306_WriteCommand+0x2c>)
 800168e:	f000 fe73 	bl	8002378 <HAL_I2C_Mem_Write>
#endif
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000098 	.word	0x20000098

080016a0 <ssd1306_WriteData>:


static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 80016ac:	2364      	movs	r3, #100	; 0x64
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	2178      	movs	r1, #120	; 0x78
 80016be:	4803      	ldr	r0, [pc, #12]	; (80016cc <ssd1306_WriteData+0x2c>)
 80016c0:	f000 fe5a 	bl	8002378 <HAL_I2C_Mem_Write>
#endif
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000098 	.word	0x20000098

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_MspInit+0x5c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_MspInit+0x5c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_MspInit+0x5c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_MspInit+0x5c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_MspInit+0x5c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_MspInit+0x5c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_MspInit+0x60>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_MspInit+0x60>)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000

08001734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0310 	add.w	r3, r7, #16
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <HAL_I2C_MspInit+0x70>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d123      	bne.n	800179c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_I2C_MspInit+0x74>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <HAL_I2C_MspInit+0x74>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_I2C_MspInit+0x74>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176c:	23c0      	movs	r3, #192	; 0xc0
 800176e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001770:	2312      	movs	r3, #18
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	4619      	mov	r1, r3
 800177e:	480b      	ldr	r0, [pc, #44]	; (80017ac <HAL_I2C_MspInit+0x78>)
 8001780:	f000 fb1a 	bl	8001db8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <HAL_I2C_MspInit+0x74>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <HAL_I2C_MspInit+0x74>)
 800178a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800178e:	61d3      	str	r3, [r2, #28]
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_I2C_MspInit+0x74>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40005400 	.word	0x40005400
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010c00 	.word	0x40010c00

080017b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0318 	add.w	r3, r7, #24
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a37      	ldr	r2, [pc, #220]	; (80018a8 <HAL_UART_MspInit+0xf8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d132      	bne.n	8001836 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <HAL_UART_MspInit+0xfc>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a35      	ldr	r2, [pc, #212]	; (80018ac <HAL_UART_MspInit+0xfc>)
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_UART_MspInit+0xfc>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_UART_MspInit+0xfc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <HAL_UART_MspInit+0xfc>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <HAL_UART_MspInit+0xfc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	4619      	mov	r1, r3
 8001814:	4826      	ldr	r0, [pc, #152]	; (80018b0 <HAL_UART_MspInit+0x100>)
 8001816:	f000 facf 	bl	8001db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0318 	add.w	r3, r7, #24
 800182c:	4619      	mov	r1, r3
 800182e:	4820      	ldr	r0, [pc, #128]	; (80018b0 <HAL_UART_MspInit+0x100>)
 8001830:	f000 fac2 	bl	8001db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001834:	e034      	b.n	80018a0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_UART_MspInit+0x104>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d12f      	bne.n	80018a0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <HAL_UART_MspInit+0xfc>)
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_UART_MspInit+0xfc>)
 8001846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184a:	61d3      	str	r3, [r2, #28]
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_UART_MspInit+0xfc>)
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_UART_MspInit+0xfc>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <HAL_UART_MspInit+0xfc>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_UART_MspInit+0xfc>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001870:	2304      	movs	r3, #4
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	4619      	mov	r1, r3
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <HAL_UART_MspInit+0x100>)
 8001884:	f000 fa98 	bl	8001db8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001888:	2308      	movs	r3, #8
 800188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_UART_MspInit+0x100>)
 800189c:	f000 fa8c 	bl	8001db8 <HAL_GPIO_Init>
}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40004400 	.word	0x40004400

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fe:	f000 f937 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f002 f888 	bl	8003a4c <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20005000 	.word	0x20005000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000588 	.word	0x20000588
 8001970:	200009a8 	.word	0x200009a8

08001974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <is_end_of_header>:

uint8_t rx_buffer[RX_BUFFER_SIZE];
uint16_t rx_index = 0;


bool is_end_of_header(void) {
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
    return rx_index >= 4 &&
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <is_end_of_header+0x58>)
 8001986:	881b      	ldrh	r3, [r3, #0]
           rx_buffer[rx_index - 4] == '\r' &&
           rx_buffer[rx_index - 3] == '\n' &&
           rx_buffer[rx_index - 2] == '\r' &&
 8001988:	2b03      	cmp	r3, #3
 800198a:	d91d      	bls.n	80019c8 <is_end_of_header+0x48>
           rx_buffer[rx_index - 4] == '\r' &&
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <is_end_of_header+0x58>)
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	3b04      	subs	r3, #4
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <is_end_of_header+0x5c>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
    return rx_index >= 4 &&
 8001996:	2b0d      	cmp	r3, #13
 8001998:	d116      	bne.n	80019c8 <is_end_of_header+0x48>
           rx_buffer[rx_index - 3] == '\n' &&
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <is_end_of_header+0x58>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	3b03      	subs	r3, #3
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <is_end_of_header+0x5c>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
           rx_buffer[rx_index - 4] == '\r' &&
 80019a4:	2b0a      	cmp	r3, #10
 80019a6:	d10f      	bne.n	80019c8 <is_end_of_header+0x48>
           rx_buffer[rx_index - 2] == '\r' &&
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <is_end_of_header+0x58>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	3b02      	subs	r3, #2
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <is_end_of_header+0x5c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
           rx_buffer[rx_index - 3] == '\n' &&
 80019b2:	2b0d      	cmp	r3, #13
 80019b4:	d108      	bne.n	80019c8 <is_end_of_header+0x48>
           rx_buffer[rx_index - 1] == '\n';
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <is_end_of_header+0x58>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <is_end_of_header+0x5c>)
 80019be:	5cd3      	ldrb	r3, [r2, r3]
           rx_buffer[rx_index - 2] == '\r' &&
 80019c0:	2b0a      	cmp	r3, #10
 80019c2:	d101      	bne.n	80019c8 <is_end_of_header+0x48>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <is_end_of_header+0x4a>
 80019c8:	2300      	movs	r3, #0
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	b2db      	uxtb	r3, r3
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	2000098c 	.word	0x2000098c
 80019dc:	2000058c 	.word	0x2000058c

080019e0 <is_rx_index_valid>:

bool is_rx_index_valid(int rx_index) {
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    return rx_index < RX_BUFFER_SIZE - 1;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80019ee:	4293      	cmp	r3, r2
 80019f0:	bfd4      	ite	le
 80019f2:	2301      	movle	r3, #1
 80019f4:	2300      	movgt	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
	...

08001a04 <uart_wait_for_byte>:

HAL_StatusTypeDef uart_wait_for_byte(uint8_t *byte) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	return HAL_UART_Receive(&huart1, byte, 1, HAL_MAX_DELAY) == HAL_OK;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a10:	2201      	movs	r2, #1
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <uart_wait_for_byte+0x2c>)
 8001a16:	f001 fe30 	bl	800367a <HAL_UART_Receive>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf0c      	ite	eq
 8001a20:	2301      	moveq	r3, #1
 8001a22:	2300      	movne	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200000ec 	.word	0x200000ec

08001a34 <http_buffer_add_byte>:

void http_buffer_add_byte(uint8_t byte) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
	if (is_rx_index_valid(rx_index)) {
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <http_buffer_add_byte+0x38>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ffcc 	bl	80019e0 <is_rx_index_valid>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <http_buffer_add_byte+0x2e>
		rx_buffer[rx_index++] = byte;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <http_buffer_add_byte+0x38>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	b291      	uxth	r1, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <http_buffer_add_byte+0x38>)
 8001a58:	8011      	strh	r1, [r2, #0]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <http_buffer_add_byte+0x3c>)
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	5453      	strb	r3, [r2, r1]
	}
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000098c 	.word	0x2000098c
 8001a70:	2000058c 	.word	0x2000058c

08001a74 <uart_receive_http_byte>:
void uart_receive_http_byte(void) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
	uint8_t byte;
	if (uart_wait_for_byte(&byte)){
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ffc1 	bl	8001a04 <uart_wait_for_byte>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <uart_receive_http_byte+0x1c>
		http_buffer_add_byte(byte);
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ffd2 	bl	8001a34 <http_buffer_add_byte>
	}
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a98:	f7ff ff6c 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a9e:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aa0:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a09      	ldr	r2, [pc, #36]	; (8001ad8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ab4:	4c09      	ldr	r4, [pc, #36]	; (8001adc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f001 ffc9 	bl	8003a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ac6:	f7fe fd9f 	bl	8000608 <main>
  bx lr
 8001aca:	4770      	bx	lr
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ad4:	08005328 	.word	0x08005328
  ldr r2, =_sbss
 8001ad8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001adc:	200009a4 	.word	0x200009a4

08001ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC1_2_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_Init+0x28>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_Init+0x28>)
 8001aee:	f043 0310 	orr.w	r3, r3, #16
 8001af2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f92b 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afa:	200f      	movs	r0, #15
 8001afc:	f000 f808 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fde6 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40022000 	.word	0x40022000

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f935 	bl	8001d9e <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b4c:	f000 f90b 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	20000010 	.word	0x20000010

08001b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_IncTick+0x1c>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x20>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_IncTick+0x20>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000014 	.word	0x20000014
 8001b90:	20000990 	.word	0x20000990

08001b94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <HAL_GetTick+0x10>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	20000990 	.word	0x20000990

08001ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb0:	f7ff fff0 	bl	8001b94 <HAL_GetTick>
 8001bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc0:	d005      	beq.n	8001bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_Delay+0x44>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bce:	bf00      	nop
 8001bd0:	f7ff ffe0 	bl	8001b94 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f7      	bhi.n	8001bd0 <HAL_Delay+0x28>
  {
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000014 	.word	0x20000014

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	; (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d30:	f7ff ff90 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff49 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff5e 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff90 	bl	8001ca8 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5f 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffb0 	bl	8001d0c <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b08b      	sub	sp, #44	; 0x2c
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dca:	e169      	b.n	80020a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f040 8158 	bne.w	800209a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4a9a      	ldr	r2, [pc, #616]	; (8002058 <HAL_GPIO_Init+0x2a0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d05e      	beq.n	8001eb2 <HAL_GPIO_Init+0xfa>
 8001df4:	4a98      	ldr	r2, [pc, #608]	; (8002058 <HAL_GPIO_Init+0x2a0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d875      	bhi.n	8001ee6 <HAL_GPIO_Init+0x12e>
 8001dfa:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_GPIO_Init+0x2a4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d058      	beq.n	8001eb2 <HAL_GPIO_Init+0xfa>
 8001e00:	4a96      	ldr	r2, [pc, #600]	; (800205c <HAL_GPIO_Init+0x2a4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d86f      	bhi.n	8001ee6 <HAL_GPIO_Init+0x12e>
 8001e06:	4a96      	ldr	r2, [pc, #600]	; (8002060 <HAL_GPIO_Init+0x2a8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d052      	beq.n	8001eb2 <HAL_GPIO_Init+0xfa>
 8001e0c:	4a94      	ldr	r2, [pc, #592]	; (8002060 <HAL_GPIO_Init+0x2a8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d869      	bhi.n	8001ee6 <HAL_GPIO_Init+0x12e>
 8001e12:	4a94      	ldr	r2, [pc, #592]	; (8002064 <HAL_GPIO_Init+0x2ac>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d04c      	beq.n	8001eb2 <HAL_GPIO_Init+0xfa>
 8001e18:	4a92      	ldr	r2, [pc, #584]	; (8002064 <HAL_GPIO_Init+0x2ac>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d863      	bhi.n	8001ee6 <HAL_GPIO_Init+0x12e>
 8001e1e:	4a92      	ldr	r2, [pc, #584]	; (8002068 <HAL_GPIO_Init+0x2b0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d046      	beq.n	8001eb2 <HAL_GPIO_Init+0xfa>
 8001e24:	4a90      	ldr	r2, [pc, #576]	; (8002068 <HAL_GPIO_Init+0x2b0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d85d      	bhi.n	8001ee6 <HAL_GPIO_Init+0x12e>
 8001e2a:	2b12      	cmp	r3, #18
 8001e2c:	d82a      	bhi.n	8001e84 <HAL_GPIO_Init+0xcc>
 8001e2e:	2b12      	cmp	r3, #18
 8001e30:	d859      	bhi.n	8001ee6 <HAL_GPIO_Init+0x12e>
 8001e32:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <HAL_GPIO_Init+0x80>)
 8001e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e38:	08001eb3 	.word	0x08001eb3
 8001e3c:	08001e8d 	.word	0x08001e8d
 8001e40:	08001e9f 	.word	0x08001e9f
 8001e44:	08001ee1 	.word	0x08001ee1
 8001e48:	08001ee7 	.word	0x08001ee7
 8001e4c:	08001ee7 	.word	0x08001ee7
 8001e50:	08001ee7 	.word	0x08001ee7
 8001e54:	08001ee7 	.word	0x08001ee7
 8001e58:	08001ee7 	.word	0x08001ee7
 8001e5c:	08001ee7 	.word	0x08001ee7
 8001e60:	08001ee7 	.word	0x08001ee7
 8001e64:	08001ee7 	.word	0x08001ee7
 8001e68:	08001ee7 	.word	0x08001ee7
 8001e6c:	08001ee7 	.word	0x08001ee7
 8001e70:	08001ee7 	.word	0x08001ee7
 8001e74:	08001ee7 	.word	0x08001ee7
 8001e78:	08001ee7 	.word	0x08001ee7
 8001e7c:	08001e95 	.word	0x08001e95
 8001e80:	08001ea9 	.word	0x08001ea9
 8001e84:	4a79      	ldr	r2, [pc, #484]	; (800206c <HAL_GPIO_Init+0x2b4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e8a:	e02c      	b.n	8001ee6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	623b      	str	r3, [r7, #32]
          break;
 8001e92:	e029      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e024      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	623b      	str	r3, [r7, #32]
          break;
 8001ea6:	e01f      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	330c      	adds	r3, #12
 8001eae:	623b      	str	r3, [r7, #32]
          break;
 8001eb0:	e01a      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d102      	bne.n	8001ec0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e013      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d105      	bne.n	8001ed4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	611a      	str	r2, [r3, #16]
          break;
 8001ed2:	e009      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	615a      	str	r2, [r3, #20]
          break;
 8001ede:	e003      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x130>
          break;
 8001ee6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2bff      	cmp	r3, #255	; 0xff
 8001eec:	d801      	bhi.n	8001ef2 <HAL_GPIO_Init+0x13a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	e001      	b.n	8001ef6 <HAL_GPIO_Init+0x13e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2bff      	cmp	r3, #255	; 0xff
 8001efc:	d802      	bhi.n	8001f04 <HAL_GPIO_Init+0x14c>
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	e002      	b.n	8001f0a <HAL_GPIO_Init+0x152>
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	3b08      	subs	r3, #8
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	210f      	movs	r1, #15
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	fa01 f303 	lsl.w	r3, r1, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	6a39      	ldr	r1, [r7, #32]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	431a      	orrs	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 80b1 	beq.w	800209a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f38:	4b4d      	ldr	r3, [pc, #308]	; (8002070 <HAL_GPIO_Init+0x2b8>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a4c      	ldr	r2, [pc, #304]	; (8002070 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_GPIO_Init+0x2b8>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f50:	4a48      	ldr	r2, [pc, #288]	; (8002074 <HAL_GPIO_Init+0x2bc>)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	089b      	lsrs	r3, r3, #2
 8001f56:	3302      	adds	r3, #2
 8001f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a40      	ldr	r2, [pc, #256]	; (8002078 <HAL_GPIO_Init+0x2c0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d013      	beq.n	8001fa4 <HAL_GPIO_Init+0x1ec>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3f      	ldr	r2, [pc, #252]	; (800207c <HAL_GPIO_Init+0x2c4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d00d      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3e      	ldr	r2, [pc, #248]	; (8002080 <HAL_GPIO_Init+0x2c8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <HAL_GPIO_Init+0x1e4>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <HAL_GPIO_Init+0x2cc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_GPIO_Init+0x1e0>
 8001f94:	2303      	movs	r3, #3
 8001f96:	e006      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e004      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_GPIO_Init+0x1ee>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa8:	f002 0203 	and.w	r2, r2, #3
 8001fac:	0092      	lsls	r2, r2, #2
 8001fae:	4093      	lsls	r3, r2
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fb6:	492f      	ldr	r1, [pc, #188]	; (8002074 <HAL_GPIO_Init+0x2bc>)
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	089b      	lsrs	r3, r3, #2
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	492c      	ldr	r1, [pc, #176]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fde:	4b2a      	ldr	r3, [pc, #168]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4928      	ldr	r1, [pc, #160]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d006      	beq.n	8002006 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff8:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4922      	ldr	r1, [pc, #136]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	43db      	mvns	r3, r3
 800200e:	491e      	ldr	r1, [pc, #120]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8002010:	4013      	ands	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d006      	beq.n	800202e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4918      	ldr	r1, [pc, #96]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e006      	b.n	800203c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	43db      	mvns	r3, r3
 8002036:	4914      	ldr	r1, [pc, #80]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 8002038:	4013      	ands	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d021      	beq.n	800208c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	490e      	ldr	r1, [pc, #56]	; (8002088 <HAL_GPIO_Init+0x2d0>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	600b      	str	r3, [r1, #0]
 8002054:	e021      	b.n	800209a <HAL_GPIO_Init+0x2e2>
 8002056:	bf00      	nop
 8002058:	10320000 	.word	0x10320000
 800205c:	10310000 	.word	0x10310000
 8002060:	10220000 	.word	0x10220000
 8002064:	10210000 	.word	0x10210000
 8002068:	10120000 	.word	0x10120000
 800206c:	10110000 	.word	0x10110000
 8002070:	40021000 	.word	0x40021000
 8002074:	40010000 	.word	0x40010000
 8002078:	40010800 	.word	0x40010800
 800207c:	40010c00 	.word	0x40010c00
 8002080:	40011000 	.word	0x40011000
 8002084:	40011400 	.word	0x40011400
 8002088:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_GPIO_Init+0x304>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	43db      	mvns	r3, r3
 8002094:	4909      	ldr	r1, [pc, #36]	; (80020bc <HAL_GPIO_Init+0x304>)
 8002096:	4013      	ands	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	3301      	adds	r3, #1
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f47f ae8e 	bne.w	8001dcc <HAL_GPIO_Init+0x14>
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	372c      	adds	r7, #44	; 0x2c
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e12b      	b.n	800235a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fb0c 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2224      	movs	r2, #36	; 0x24
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002154:	f001 f970 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8002158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a81      	ldr	r2, [pc, #516]	; (8002364 <HAL_I2C_Init+0x274>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d807      	bhi.n	8002174 <HAL_I2C_Init+0x84>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a80      	ldr	r2, [pc, #512]	; (8002368 <HAL_I2C_Init+0x278>)
 8002168:	4293      	cmp	r3, r2
 800216a:	bf94      	ite	ls
 800216c:	2301      	movls	r3, #1
 800216e:	2300      	movhi	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e006      	b.n	8002182 <HAL_I2C_Init+0x92>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4a7d      	ldr	r2, [pc, #500]	; (800236c <HAL_I2C_Init+0x27c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	bf94      	ite	ls
 800217c:	2301      	movls	r3, #1
 800217e:	2300      	movhi	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0e7      	b.n	800235a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4a78      	ldr	r2, [pc, #480]	; (8002370 <HAL_I2C_Init+0x280>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0c9b      	lsrs	r3, r3, #18
 8002194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <HAL_I2C_Init+0x274>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d802      	bhi.n	80021c4 <HAL_I2C_Init+0xd4>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	e009      	b.n	80021d8 <HAL_I2C_Init+0xe8>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	4a69      	ldr	r2, [pc, #420]	; (8002374 <HAL_I2C_Init+0x284>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	3301      	adds	r3, #1
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	430b      	orrs	r3, r1
 80021de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	495c      	ldr	r1, [pc, #368]	; (8002364 <HAL_I2C_Init+0x274>)
 80021f4:	428b      	cmp	r3, r1
 80021f6:	d819      	bhi.n	800222c <HAL_I2C_Init+0x13c>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1e59      	subs	r1, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fbb1 f3f3 	udiv	r3, r1, r3
 8002206:	1c59      	adds	r1, r3, #1
 8002208:	f640 73fc 	movw	r3, #4092	; 0xffc
 800220c:	400b      	ands	r3, r1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_I2C_Init+0x138>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1e59      	subs	r1, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002220:	3301      	adds	r3, #1
 8002222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002226:	e051      	b.n	80022cc <HAL_I2C_Init+0x1dc>
 8002228:	2304      	movs	r3, #4
 800222a:	e04f      	b.n	80022cc <HAL_I2C_Init+0x1dc>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d111      	bne.n	8002258 <HAL_I2C_Init+0x168>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	440b      	add	r3, r1
 8002242:	fbb0 f3f3 	udiv	r3, r0, r3
 8002246:	3301      	adds	r3, #1
 8002248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e012      	b.n	800227e <HAL_I2C_Init+0x18e>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e58      	subs	r0, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	0099      	lsls	r1, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	fbb0 f3f3 	udiv	r3, r0, r3
 800226e:	3301      	adds	r3, #1
 8002270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_I2C_Init+0x196>
 8002282:	2301      	movs	r3, #1
 8002284:	e022      	b.n	80022cc <HAL_I2C_Init+0x1dc>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10e      	bne.n	80022ac <HAL_I2C_Init+0x1bc>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1e58      	subs	r0, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	440b      	add	r3, r1
 800229c:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022aa:	e00f      	b.n	80022cc <HAL_I2C_Init+0x1dc>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1e58      	subs	r0, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	0099      	lsls	r1, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	6809      	ldr	r1, [r1, #0]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6911      	ldr	r1, [r2, #16]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68d2      	ldr	r2, [r2, #12]
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	430b      	orrs	r3, r1
 800230e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	000186a0 	.word	0x000186a0
 8002368:	001e847f 	.word	0x001e847f
 800236c:	003d08ff 	.word	0x003d08ff
 8002370:	431bde83 	.word	0x431bde83
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	460b      	mov	r3, r1
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002392:	f7ff fbff 	bl	8001b94 <HAL_GetTick>
 8002396:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	f040 80d9 	bne.w	8002558 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2319      	movs	r3, #25
 80023ac:	2201      	movs	r2, #1
 80023ae:	496d      	ldr	r1, [pc, #436]	; (8002564 <HAL_I2C_Mem_Write+0x1ec>)
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fa9f 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
 80023be:	e0cc      	b.n	800255a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_I2C_Mem_Write+0x56>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e0c5      	b.n	800255a <HAL_I2C_Mem_Write+0x1e2>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d007      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002402:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2221      	movs	r2, #33	; 0x21
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a3a      	ldr	r2, [r7, #32]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a4d      	ldr	r2, [pc, #308]	; (8002568 <HAL_I2C_Mem_Write+0x1f0>)
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002436:	88f8      	ldrh	r0, [r7, #6]
 8002438:	893a      	ldrh	r2, [r7, #8]
 800243a:	8979      	ldrh	r1, [r7, #10]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	4603      	mov	r3, r0
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9be 	bl	80027c8 <I2C_RequestMemoryWrite>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d052      	beq.n	80024f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e081      	b.n	800255a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fb64 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b04      	cmp	r3, #4
 800246c:	d107      	bne.n	800247e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e06b      	b.n	800255a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d11b      	bne.n	80024f8 <HAL_I2C_Mem_Write+0x180>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d017      	beq.n	80024f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1aa      	bne.n	8002456 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fb57 	bl	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00d      	beq.n	800252c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2b04      	cmp	r3, #4
 8002516:	d107      	bne.n	8002528 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002526:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e016      	b.n	800255a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	00100002 	.word	0x00100002
 8002568:	ffff0000 	.word	0xffff0000

0800256c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	460b      	mov	r3, r1
 800257a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff fb0a 	bl	8001b94 <HAL_GetTick>
 8002580:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b20      	cmp	r3, #32
 8002590:	f040 8111 	bne.w	80027b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2319      	movs	r3, #25
 800259a:	2201      	movs	r2, #1
 800259c:	4988      	ldr	r1, [pc, #544]	; (80027c0 <HAL_I2C_IsDeviceReady+0x254>)
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f9a8 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025aa:	2302      	movs	r3, #2
 80025ac:	e104      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d101      	bne.n	80025bc <HAL_I2C_IsDeviceReady+0x50>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e0fd      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x24c>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d007      	beq.n	80025e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2224      	movs	r2, #36	; 0x24
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a70      	ldr	r2, [pc, #448]	; (80027c4 <HAL_I2C_IsDeviceReady+0x258>)
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002614:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2200      	movs	r2, #0
 800261e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f966 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263c:	d103      	bne.n	8002646 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0b6      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800264a:	897b      	ldrh	r3, [r7, #10]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002658:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800265a:	f7ff fa9b 	bl	8001b94 <HAL_GetTick>
 800265e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002684:	bf0c      	ite	eq
 8002686:	2301      	moveq	r3, #1
 8002688:	2300      	movne	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800268e:	e025      	b.n	80026dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002690:	f7ff fa80 	bl	8001b94 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <HAL_I2C_IsDeviceReady+0x13a>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d103      	bne.n	80026ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	22a0      	movs	r2, #160	; 0xa0
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2ba0      	cmp	r3, #160	; 0xa0
 80026e6:	d005      	beq.n	80026f4 <HAL_I2C_IsDeviceReady+0x188>
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <HAL_I2C_IsDeviceReady+0x188>
 80026ee:	7dbb      	ldrb	r3, [r7, #22]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0cd      	beq.n	8002690 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b02      	cmp	r3, #2
 8002708:	d129      	bne.n	800275e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002718:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2319      	movs	r3, #25
 8002736:	2201      	movs	r2, #1
 8002738:	4921      	ldr	r1, [pc, #132]	; (80027c0 <HAL_I2C_IsDeviceReady+0x254>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f8da 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e036      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2220      	movs	r2, #32
 800274e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e02c      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002776:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2319      	movs	r3, #25
 800277e:	2201      	movs	r2, #1
 8002780:	490f      	ldr	r1, [pc, #60]	; (80027c0 <HAL_I2C_IsDeviceReady+0x254>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f8b6 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e012      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	3301      	adds	r3, #1
 8002796:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	f4ff af32 	bcc.w	8002606 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	00100002 	.word	0x00100002
 80027c4:	ffff0000 	.word	0xffff0000

080027c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	4603      	mov	r3, r0
 80027d8:	817b      	strh	r3, [r7, #10]
 80027da:	460b      	mov	r3, r1
 80027dc:	813b      	strh	r3, [r7, #8]
 80027de:	4613      	mov	r3, r2
 80027e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f878 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002818:	d103      	bne.n	8002822 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e05f      	b.n	80028e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002826:	897b      	ldrh	r3, [r7, #10]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002834:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	6a3a      	ldr	r2, [r7, #32]
 800283a:	492d      	ldr	r1, [pc, #180]	; (80028f0 <I2C_RequestMemoryWrite+0x128>)
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f8d3 	bl	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e04c      	b.n	80028e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	6a39      	ldr	r1, [r7, #32]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f95e 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00d      	beq.n	800288e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b04      	cmp	r3, #4
 8002878:	d107      	bne.n	800288a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e02b      	b.n	80028e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002894:	893b      	ldrh	r3, [r7, #8]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	e021      	b.n	80028e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028a0:	893b      	ldrh	r3, [r7, #8]
 80028a2:	0a1b      	lsrs	r3, r3, #8
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	6a39      	ldr	r1, [r7, #32]
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f938 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d107      	bne.n	80028d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e005      	b.n	80028e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028da:	893b      	ldrh	r3, [r7, #8]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	00010002 	.word	0x00010002

080028f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002904:	e048      	b.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800290c:	d044      	beq.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7ff f941 	bl	8001b94 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d139      	bne.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10d      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0x56>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	43da      	mvns	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	e00c      	b.n	8002964 <I2C_WaitOnFlagUntilTimeout+0x70>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	429a      	cmp	r2, r3
 8002968:	d116      	bne.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e023      	b.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10d      	bne.n	80029be <I2C_WaitOnFlagUntilTimeout+0xca>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	e00c      	b.n	80029d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d093      	beq.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f6:	e071      	b.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a06:	d123      	bne.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e067      	b.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a56:	d041      	beq.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7ff f89c 	bl	8001b94 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d136      	bne.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10c      	bne.n	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e00b      	b.n	8002aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e021      	b.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	0c1b      	lsrs	r3, r3, #16
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10c      	bne.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	43da      	mvns	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e00b      	b.n	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f af6d 	bne.w	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b34:	e034      	b.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f886 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e034      	b.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4c:	d028      	beq.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7ff f821 	bl	8001b94 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11d      	bne.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b80      	cmp	r3, #128	; 0x80
 8002b70:	d016      	beq.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e007      	b.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002baa:	2b80      	cmp	r3, #128	; 0x80
 8002bac:	d1c3      	bne.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bc4:	e034      	b.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f83e 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e034      	b.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bdc:	d028      	beq.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bde:	f7fe ffd9 	bl	8001b94 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d302      	bcc.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11d      	bne.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d016      	beq.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d1c3      	bne.n	8002bc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d11b      	bne.n	8002c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0204 	orr.w	r2, r3, #4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e272      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8087 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc4:	4b92      	ldr	r3, [pc, #584]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d00c      	beq.n	8002cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cd0:	4b8f      	ldr	r3, [pc, #572]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d112      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
 8002cdc:	4b8c      	ldr	r3, [pc, #560]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	4b89      	ldr	r3, [pc, #548]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d06c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d168      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e24c      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x76>
 8002d0c:	4b80      	ldr	r3, [pc, #512]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7f      	ldr	r2, [pc, #508]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e02e      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7a      	ldr	r2, [pc, #488]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b78      	ldr	r3, [pc, #480]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a77      	ldr	r2, [pc, #476]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e01d      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0xbc>
 8002d46:	4b72      	ldr	r3, [pc, #456]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a71      	ldr	r2, [pc, #452]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b6f      	ldr	r3, [pc, #444]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6e      	ldr	r2, [pc, #440]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d60:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a6a      	ldr	r2, [pc, #424]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a67      	ldr	r2, [pc, #412]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe ff08 	bl	8001b94 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe ff04 	bl	8001b94 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e200      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe4>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fef4 	bl	8001b94 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fef0 	bl	8001b94 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1ec      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x10c>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d063      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dde:	4b4c      	ldr	r3, [pc, #304]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dea:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d11c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x18c>
 8002df6:	4b46      	ldr	r3, [pc, #280]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d116      	bne.n	8002e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e1c0      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4939      	ldr	r1, [pc, #228]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	e03a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e38:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fea9 	bl	8001b94 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe fea5 	bl	8001b94 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e1a1      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4927      	ldr	r1, [pc, #156]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]
 8002e78:	e015      	b.n	8002ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fe88 	bl	8001b94 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e88:	f7fe fe84 	bl	8001b94 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e180      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d03a      	beq.n	8002f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d019      	beq.n	8002eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fe68 	bl	8001b94 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fe64 	bl	8001b94 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e160      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f000 face 	bl	8003488 <RCC_Delay>
 8002eec:	e01c      	b.n	8002f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fe4e 	bl	8001b94 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efa:	e00f      	b.n	8002f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe fe4a 	bl	8001b94 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d908      	bls.n	8002f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e146      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	42420000 	.word	0x42420000
 8002f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e9      	bne.n	8002efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a6 	beq.w	8003082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a87      	ldr	r2, [pc, #540]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	61d3      	str	r3, [r2, #28]
 8002f52:	4b85      	ldr	r3, [pc, #532]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b82      	ldr	r3, [pc, #520]	; (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b7f      	ldr	r3, [pc, #508]	; (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7e      	ldr	r2, [pc, #504]	; (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fe0b 	bl	8001b94 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe fe07 	bl	8001b94 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	; 0x64
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e103      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b75      	ldr	r3, [pc, #468]	; (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x312>
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	e02d      	b.n	8003012 <HAL_RCC_OscConfig+0x36e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x334>
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4a69      	ldr	r2, [pc, #420]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6213      	str	r3, [r2, #32]
 8002fca:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a66      	ldr	r2, [pc, #408]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	e01c      	b.n	8003012 <HAL_RCC_OscConfig+0x36e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCC_OscConfig+0x356>
 8002fe0:	4b61      	ldr	r3, [pc, #388]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4a60      	ldr	r2, [pc, #384]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6213      	str	r3, [r2, #32]
 8002fec:	4b5e      	ldr	r3, [pc, #376]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a5d      	ldr	r2, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	e00b      	b.n	8003012 <HAL_RCC_OscConfig+0x36e>
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a5a      	ldr	r2, [pc, #360]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	4b58      	ldr	r3, [pc, #352]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a57      	ldr	r2, [pc, #348]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d015      	beq.n	8003046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe fdbb 	bl	8001b94 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe fdb7 	bl	8001b94 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0b1      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	4b4b      	ldr	r3, [pc, #300]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ee      	beq.n	8003022 <HAL_RCC_OscConfig+0x37e>
 8003044:	e014      	b.n	8003070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fe fda5 	bl	8001b94 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe fda1 	bl	8001b94 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e09b      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ee      	bne.n	800304e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d105      	bne.n	8003082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	4a3b      	ldr	r2, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8087 	beq.w	800319a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d061      	beq.n	800315c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d146      	bne.n	800312e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <HAL_RCC_OscConfig+0x4cc>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe fd75 	bl	8001b94 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe fd71 	bl	8001b94 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e06d      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	4b29      	ldr	r3, [pc, #164]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d4:	d108      	bne.n	80030e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4921      	ldr	r1, [pc, #132]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e8:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a19      	ldr	r1, [r3, #32]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	430b      	orrs	r3, r1
 80030fa:	491b      	ldr	r1, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003100:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003106:	f7fe fd45 	bl	8001b94 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310e:	f7fe fd41 	bl	8001b94 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x46a>
 800312c:	e035      	b.n	800319a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312e:	4b10      	ldr	r3, [pc, #64]	; (8003170 <HAL_RCC_OscConfig+0x4cc>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe fd2e 	bl	8001b94 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fd2a 	bl	8001b94 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e026      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x498>
 800315a:	e01e      	b.n	800319a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e019      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
 8003168:	40021000 	.word	0x40021000
 800316c:	40007000 	.word	0x40007000
 8003170:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0d0      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b6a      	ldr	r3, [pc, #424]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d910      	bls.n	80031ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b67      	ldr	r3, [pc, #412]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4965      	ldr	r1, [pc, #404]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0b8      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003204:	4b59      	ldr	r3, [pc, #356]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a58      	ldr	r2, [pc, #352]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800320e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800321c:	4b53      	ldr	r3, [pc, #332]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a52      	ldr	r2, [pc, #328]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b50      	ldr	r3, [pc, #320]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	494d      	ldr	r1, [pc, #308]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d040      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d115      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07f      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	4b41      	ldr	r3, [pc, #260]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e073      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003276:	4b3d      	ldr	r3, [pc, #244]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06b      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b39      	ldr	r3, [pc, #228]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4936      	ldr	r1, [pc, #216]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003298:	f7fe fc7c 	bl	8001b94 <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fe fc78 	bl	8001b94 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e053      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	4b2d      	ldr	r3, [pc, #180]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 020c 	and.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1eb      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d210      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 0207 	bic.w	r2, r3, #7
 80032de:	4922      	ldr	r1, [pc, #136]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e032      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4916      	ldr	r1, [pc, #88]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003336:	f000 f821 	bl	800337c <HAL_RCC_GetSysClockFreq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	490a      	ldr	r1, [pc, #40]	; (8003370 <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	5ccb      	ldrb	r3, [r1, r3]
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1cc>)
 8003350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fbda 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40022000 	.word	0x40022000
 800336c:	40021000 	.word	0x40021000
 8003370:	08005260 	.word	0x08005260
 8003374:	2000000c 	.word	0x2000000c
 8003378:	20000010 	.word	0x20000010

0800337c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003396:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <HAL_RCC_GetSysClockFreq+0x94>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x30>
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x36>
 80033aa:	e027      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033ac:	4b19      	ldr	r3, [pc, #100]	; (8003414 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ae:	613b      	str	r3, [r7, #16]
      break;
 80033b0:	e027      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0c9b      	lsrs	r3, r3, #18
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033bc:	5cd3      	ldrb	r3, [r2, r3]
 80033be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d010      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ca:	4b11      	ldr	r3, [pc, #68]	; (8003410 <HAL_RCC_GetSysClockFreq+0x94>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0c5b      	lsrs	r3, r3, #17
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	4a11      	ldr	r2, [pc, #68]	; (800341c <HAL_RCC_GetSysClockFreq+0xa0>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <HAL_RCC_GetSysClockFreq+0x98>)
 80033de:	fb03 f202 	mul.w	r2, r3, r2
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e004      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033f0:	fb02 f303 	mul.w	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	613b      	str	r3, [r7, #16]
      break;
 80033fa:	e002      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fe:	613b      	str	r3, [r7, #16]
      break;
 8003400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003402:	693b      	ldr	r3, [r7, #16]
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	007a1200 	.word	0x007a1200
 8003418:	08005278 	.word	0x08005278
 800341c:	08005288 	.word	0x08005288
 8003420:	003d0900 	.word	0x003d0900

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b02      	ldr	r3, [pc, #8]	; (8003434 <HAL_RCC_GetHCLKFreq+0x10>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	2000000c 	.word	0x2000000c

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff2 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	08005270 	.word	0x08005270

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffde 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0adb      	lsrs	r3, r3, #11
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	08005270 	.word	0x08005270

08003488 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <RCC_Delay+0x34>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <RCC_Delay+0x38>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	0a5b      	lsrs	r3, r3, #9
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	fb02 f303 	mul.w	r3, r2, r3
 80034a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034a4:	bf00      	nop
  }
  while (Delay --);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1e5a      	subs	r2, r3, #1
 80034aa:	60fa      	str	r2, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f9      	bne.n	80034a4 <RCC_Delay+0x1c>
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	2000000c 	.word	0x2000000c
 80034c0:	10624dd3 	.word	0x10624dd3

080034c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e042      	b.n	800355c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe f960 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	; 0x24
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fa09 	bl	8003920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800353c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	d175      	bne.n	8003670 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_UART_Transmit+0x2c>
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e06e      	b.n	8003672 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2221      	movs	r2, #33	; 0x21
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a2:	f7fe faf7 	bl	8001b94 <HAL_GetTick>
 80035a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	88fa      	ldrh	r2, [r7, #6]
 80035b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035bc:	d108      	bne.n	80035d0 <HAL_UART_Transmit+0x6c>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	e003      	b.n	80035d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d8:	e02e      	b.n	8003638 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2200      	movs	r2, #0
 80035e2:	2180      	movs	r1, #128	; 0x80
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f8df 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e03a      	b.n	8003672 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003610:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	3302      	adds	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	e007      	b.n	800362a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	3301      	adds	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1cb      	bne.n	80035da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	2140      	movs	r1, #64	; 0x40
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f8ab 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e006      	b.n	8003672 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b08a      	sub	sp, #40	; 0x28
 800367e:	af02      	add	r7, sp, #8
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	4613      	mov	r3, r2
 8003688:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	f040 8081 	bne.w	800379e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_UART_Receive+0x2e>
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e079      	b.n	80037a0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2222      	movs	r2, #34	; 0x22
 80036b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fa68 	bl	8001b94 <HAL_GetTick>
 80036c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	88fa      	ldrh	r2, [r7, #6]
 80036d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036da:	d108      	bne.n	80036ee <HAL_UART_Receive+0x74>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	61bb      	str	r3, [r7, #24]
 80036ec:	e003      	b.n	80036f6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80036f6:	e047      	b.n	8003788 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	2120      	movs	r1, #32
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 f850 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e042      	b.n	80037a0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10c      	bne.n	800373a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	b29b      	uxth	r3, r3
 8003728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372c:	b29a      	uxth	r2, r3
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e01f      	b.n	800377a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003742:	d007      	beq.n	8003754 <HAL_UART_Receive+0xda>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <HAL_UART_Receive+0xe8>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e008      	b.n	8003774 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376e:	b2da      	uxtb	r2, r3
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3301      	adds	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1b2      	bne.n	80036f8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800379e:	2302      	movs	r3, #2
  }
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	e03b      	b.n	8003832 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c0:	d037      	beq.n	8003832 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fe f9e7 	bl	8001b94 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e03a      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d023      	beq.n	8003832 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d020      	beq.n	8003832 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d01d      	beq.n	8003832 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d116      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f81d 	bl	800385a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2208      	movs	r2, #8
 8003824:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e00f      	b.n	8003852 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	429a      	cmp	r2, r3
 800384e:	d0b4      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385a:	b480      	push	{r7}
 800385c:	b095      	sub	sp, #84	; 0x54
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003878:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003882:	643a      	str	r2, [r7, #64]	; 0x40
 8003884:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003888:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3314      	adds	r3, #20
 800389c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3314      	adds	r3, #20
 80038b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e5      	bne.n	8003896 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d119      	bne.n	8003906 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 0310 	bic.w	r3, r3, #16
 80038e8:	647b      	str	r3, [r7, #68]	; 0x44
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038f2:	61ba      	str	r2, [r7, #24]
 80038f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003914:	bf00      	nop
 8003916:	3754      	adds	r7, #84	; 0x54
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr
	...

08003920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800395a:	f023 030c 	bic.w	r3, r3, #12
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	430b      	orrs	r3, r1
 8003966:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <UART_SetConfig+0x114>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003988:	f7ff fd6a 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	e002      	b.n	8003996 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003990:	f7ff fd52 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8003994:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	009a      	lsls	r2, r3, #2
 80039a0:	441a      	add	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <UART_SetConfig+0x118>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	0119      	lsls	r1, r3, #4
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <UART_SetConfig+0x118>)
 80039ce:	fba3 0302 	umull	r0, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2064      	movs	r0, #100	; 0x64
 80039d6:	fb00 f303 	mul.w	r3, r0, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <UART_SetConfig+0x118>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ec:	4419      	add	r1, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4613      	mov	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	009a      	lsls	r2, r3, #2
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <UART_SetConfig+0x118>)
 8003a06:	fba3 0302 	umull	r0, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2064      	movs	r0, #100	; 0x64
 8003a0e:	fb00 f303 	mul.w	r3, r0, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	; 0x32
 8003a18:	4a07      	ldr	r2, [pc, #28]	; (8003a38 <UART_SetConfig+0x118>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	440a      	add	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40013800 	.word	0x40013800
 8003a38:	51eb851f 	.word	0x51eb851f

08003a3c <calloc>:
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <calloc+0xc>)
 8003a3e:	460a      	mov	r2, r1
 8003a40:	4601      	mov	r1, r0
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	f000 b866 	b.w	8003b14 <_calloc_r>
 8003a48:	20000018 	.word	0x20000018

08003a4c <__errno>:
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <__errno+0x8>)
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000018 	.word	0x20000018

08003a58 <__libc_init_array>:
 8003a58:	b570      	push	{r4, r5, r6, lr}
 8003a5a:	2600      	movs	r6, #0
 8003a5c:	4d0c      	ldr	r5, [pc, #48]	; (8003a90 <__libc_init_array+0x38>)
 8003a5e:	4c0d      	ldr	r4, [pc, #52]	; (8003a94 <__libc_init_array+0x3c>)
 8003a60:	1b64      	subs	r4, r4, r5
 8003a62:	10a4      	asrs	r4, r4, #2
 8003a64:	42a6      	cmp	r6, r4
 8003a66:	d109      	bne.n	8003a7c <__libc_init_array+0x24>
 8003a68:	f000 fcee 	bl	8004448 <_init>
 8003a6c:	2600      	movs	r6, #0
 8003a6e:	4d0a      	ldr	r5, [pc, #40]	; (8003a98 <__libc_init_array+0x40>)
 8003a70:	4c0a      	ldr	r4, [pc, #40]	; (8003a9c <__libc_init_array+0x44>)
 8003a72:	1b64      	subs	r4, r4, r5
 8003a74:	10a4      	asrs	r4, r4, #2
 8003a76:	42a6      	cmp	r6, r4
 8003a78:	d105      	bne.n	8003a86 <__libc_init_array+0x2e>
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a80:	4798      	blx	r3
 8003a82:	3601      	adds	r6, #1
 8003a84:	e7ee      	b.n	8003a64 <__libc_init_array+0xc>
 8003a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a8a:	4798      	blx	r3
 8003a8c:	3601      	adds	r6, #1
 8003a8e:	e7f2      	b.n	8003a76 <__libc_init_array+0x1e>
 8003a90:	08005320 	.word	0x08005320
 8003a94:	08005320 	.word	0x08005320
 8003a98:	08005320 	.word	0x08005320
 8003a9c:	08005324 	.word	0x08005324

08003aa0 <free>:
 8003aa0:	4b02      	ldr	r3, [pc, #8]	; (8003aac <free+0xc>)
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f000 b849 	b.w	8003b3c <_free_r>
 8003aaa:	bf00      	nop
 8003aac:	20000018 	.word	0x20000018

08003ab0 <memcmp>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	3901      	subs	r1, #1
 8003ab4:	4402      	add	r2, r0
 8003ab6:	4290      	cmp	r0, r2
 8003ab8:	d101      	bne.n	8003abe <memcmp+0xe>
 8003aba:	2000      	movs	r0, #0
 8003abc:	e005      	b.n	8003aca <memcmp+0x1a>
 8003abe:	7803      	ldrb	r3, [r0, #0]
 8003ac0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003ac4:	42a3      	cmp	r3, r4
 8003ac6:	d001      	beq.n	8003acc <memcmp+0x1c>
 8003ac8:	1b18      	subs	r0, r3, r4
 8003aca:	bd10      	pop	{r4, pc}
 8003acc:	3001      	adds	r0, #1
 8003ace:	e7f2      	b.n	8003ab6 <memcmp+0x6>

08003ad0 <memmove>:
 8003ad0:	4288      	cmp	r0, r1
 8003ad2:	b510      	push	{r4, lr}
 8003ad4:	eb01 0402 	add.w	r4, r1, r2
 8003ad8:	d902      	bls.n	8003ae0 <memmove+0x10>
 8003ada:	4284      	cmp	r4, r0
 8003adc:	4623      	mov	r3, r4
 8003ade:	d807      	bhi.n	8003af0 <memmove+0x20>
 8003ae0:	1e43      	subs	r3, r0, #1
 8003ae2:	42a1      	cmp	r1, r4
 8003ae4:	d008      	beq.n	8003af8 <memmove+0x28>
 8003ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aee:	e7f8      	b.n	8003ae2 <memmove+0x12>
 8003af0:	4601      	mov	r1, r0
 8003af2:	4402      	add	r2, r0
 8003af4:	428a      	cmp	r2, r1
 8003af6:	d100      	bne.n	8003afa <memmove+0x2a>
 8003af8:	bd10      	pop	{r4, pc}
 8003afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b02:	e7f7      	b.n	8003af4 <memmove+0x24>

08003b04 <memset>:
 8003b04:	4603      	mov	r3, r0
 8003b06:	4402      	add	r2, r0
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d100      	bne.n	8003b0e <memset+0xa>
 8003b0c:	4770      	bx	lr
 8003b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b12:	e7f9      	b.n	8003b08 <memset+0x4>

08003b14 <_calloc_r>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	fba1 5402 	umull	r5, r4, r1, r2
 8003b1a:	b934      	cbnz	r4, 8003b2a <_calloc_r+0x16>
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	f000 f875 	bl	8003c0c <_malloc_r>
 8003b22:	4606      	mov	r6, r0
 8003b24:	b928      	cbnz	r0, 8003b32 <_calloc_r+0x1e>
 8003b26:	4630      	mov	r0, r6
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
 8003b2a:	220c      	movs	r2, #12
 8003b2c:	2600      	movs	r6, #0
 8003b2e:	6002      	str	r2, [r0, #0]
 8003b30:	e7f9      	b.n	8003b26 <_calloc_r+0x12>
 8003b32:	462a      	mov	r2, r5
 8003b34:	4621      	mov	r1, r4
 8003b36:	f7ff ffe5 	bl	8003b04 <memset>
 8003b3a:	e7f4      	b.n	8003b26 <_calloc_r+0x12>

08003b3c <_free_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4605      	mov	r5, r0
 8003b40:	2900      	cmp	r1, #0
 8003b42:	d040      	beq.n	8003bc6 <_free_r+0x8a>
 8003b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b48:	1f0c      	subs	r4, r1, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfb8      	it	lt
 8003b4e:	18e4      	addlt	r4, r4, r3
 8003b50:	f000 fadc 	bl	800410c <__malloc_lock>
 8003b54:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <_free_r+0x8c>)
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	b933      	cbnz	r3, 8003b68 <_free_r+0x2c>
 8003b5a:	6063      	str	r3, [r4, #4]
 8003b5c:	6014      	str	r4, [r2, #0]
 8003b5e:	4628      	mov	r0, r5
 8003b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b64:	f000 bad8 	b.w	8004118 <__malloc_unlock>
 8003b68:	42a3      	cmp	r3, r4
 8003b6a:	d908      	bls.n	8003b7e <_free_r+0x42>
 8003b6c:	6820      	ldr	r0, [r4, #0]
 8003b6e:	1821      	adds	r1, r4, r0
 8003b70:	428b      	cmp	r3, r1
 8003b72:	bf01      	itttt	eq
 8003b74:	6819      	ldreq	r1, [r3, #0]
 8003b76:	685b      	ldreq	r3, [r3, #4]
 8003b78:	1809      	addeq	r1, r1, r0
 8003b7a:	6021      	streq	r1, [r4, #0]
 8003b7c:	e7ed      	b.n	8003b5a <_free_r+0x1e>
 8003b7e:	461a      	mov	r2, r3
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	b10b      	cbz	r3, 8003b88 <_free_r+0x4c>
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	d9fa      	bls.n	8003b7e <_free_r+0x42>
 8003b88:	6811      	ldr	r1, [r2, #0]
 8003b8a:	1850      	adds	r0, r2, r1
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	d10b      	bne.n	8003ba8 <_free_r+0x6c>
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	4401      	add	r1, r0
 8003b94:	1850      	adds	r0, r2, r1
 8003b96:	4283      	cmp	r3, r0
 8003b98:	6011      	str	r1, [r2, #0]
 8003b9a:	d1e0      	bne.n	8003b5e <_free_r+0x22>
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4401      	add	r1, r0
 8003ba2:	6011      	str	r1, [r2, #0]
 8003ba4:	6053      	str	r3, [r2, #4]
 8003ba6:	e7da      	b.n	8003b5e <_free_r+0x22>
 8003ba8:	d902      	bls.n	8003bb0 <_free_r+0x74>
 8003baa:	230c      	movs	r3, #12
 8003bac:	602b      	str	r3, [r5, #0]
 8003bae:	e7d6      	b.n	8003b5e <_free_r+0x22>
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	1821      	adds	r1, r4, r0
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	bf01      	itttt	eq
 8003bb8:	6819      	ldreq	r1, [r3, #0]
 8003bba:	685b      	ldreq	r3, [r3, #4]
 8003bbc:	1809      	addeq	r1, r1, r0
 8003bbe:	6021      	streq	r1, [r4, #0]
 8003bc0:	6063      	str	r3, [r4, #4]
 8003bc2:	6054      	str	r4, [r2, #4]
 8003bc4:	e7cb      	b.n	8003b5e <_free_r+0x22>
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	20000994 	.word	0x20000994

08003bcc <sbrk_aligned>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	4e0e      	ldr	r6, [pc, #56]	; (8003c08 <sbrk_aligned+0x3c>)
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	6831      	ldr	r1, [r6, #0]
 8003bd4:	4605      	mov	r5, r0
 8003bd6:	b911      	cbnz	r1, 8003bde <sbrk_aligned+0x12>
 8003bd8:	f000 fa22 	bl	8004020 <_sbrk_r>
 8003bdc:	6030      	str	r0, [r6, #0]
 8003bde:	4621      	mov	r1, r4
 8003be0:	4628      	mov	r0, r5
 8003be2:	f000 fa1d 	bl	8004020 <_sbrk_r>
 8003be6:	1c43      	adds	r3, r0, #1
 8003be8:	d00a      	beq.n	8003c00 <sbrk_aligned+0x34>
 8003bea:	1cc4      	adds	r4, r0, #3
 8003bec:	f024 0403 	bic.w	r4, r4, #3
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d007      	beq.n	8003c04 <sbrk_aligned+0x38>
 8003bf4:	1a21      	subs	r1, r4, r0
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f000 fa12 	bl	8004020 <_sbrk_r>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d101      	bne.n	8003c04 <sbrk_aligned+0x38>
 8003c00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c04:	4620      	mov	r0, r4
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	20000998 	.word	0x20000998

08003c0c <_malloc_r>:
 8003c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	1ccd      	adds	r5, r1, #3
 8003c12:	f025 0503 	bic.w	r5, r5, #3
 8003c16:	3508      	adds	r5, #8
 8003c18:	2d0c      	cmp	r5, #12
 8003c1a:	bf38      	it	cc
 8003c1c:	250c      	movcc	r5, #12
 8003c1e:	2d00      	cmp	r5, #0
 8003c20:	4607      	mov	r7, r0
 8003c22:	db01      	blt.n	8003c28 <_malloc_r+0x1c>
 8003c24:	42a9      	cmp	r1, r5
 8003c26:	d905      	bls.n	8003c34 <_malloc_r+0x28>
 8003c28:	230c      	movs	r3, #12
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	4630      	mov	r0, r6
 8003c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c34:	4e2e      	ldr	r6, [pc, #184]	; (8003cf0 <_malloc_r+0xe4>)
 8003c36:	f000 fa69 	bl	800410c <__malloc_lock>
 8003c3a:	6833      	ldr	r3, [r6, #0]
 8003c3c:	461c      	mov	r4, r3
 8003c3e:	bb34      	cbnz	r4, 8003c8e <_malloc_r+0x82>
 8003c40:	4629      	mov	r1, r5
 8003c42:	4638      	mov	r0, r7
 8003c44:	f7ff ffc2 	bl	8003bcc <sbrk_aligned>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	d14d      	bne.n	8003cea <_malloc_r+0xde>
 8003c4e:	6834      	ldr	r4, [r6, #0]
 8003c50:	4626      	mov	r6, r4
 8003c52:	2e00      	cmp	r6, #0
 8003c54:	d140      	bne.n	8003cd8 <_malloc_r+0xcc>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	4631      	mov	r1, r6
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	eb04 0803 	add.w	r8, r4, r3
 8003c60:	f000 f9de 	bl	8004020 <_sbrk_r>
 8003c64:	4580      	cmp	r8, r0
 8003c66:	d13a      	bne.n	8003cde <_malloc_r+0xd2>
 8003c68:	6821      	ldr	r1, [r4, #0]
 8003c6a:	3503      	adds	r5, #3
 8003c6c:	1a6d      	subs	r5, r5, r1
 8003c6e:	f025 0503 	bic.w	r5, r5, #3
 8003c72:	3508      	adds	r5, #8
 8003c74:	2d0c      	cmp	r5, #12
 8003c76:	bf38      	it	cc
 8003c78:	250c      	movcc	r5, #12
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	f7ff ffa5 	bl	8003bcc <sbrk_aligned>
 8003c82:	3001      	adds	r0, #1
 8003c84:	d02b      	beq.n	8003cde <_malloc_r+0xd2>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	442b      	add	r3, r5
 8003c8a:	6023      	str	r3, [r4, #0]
 8003c8c:	e00e      	b.n	8003cac <_malloc_r+0xa0>
 8003c8e:	6822      	ldr	r2, [r4, #0]
 8003c90:	1b52      	subs	r2, r2, r5
 8003c92:	d41e      	bmi.n	8003cd2 <_malloc_r+0xc6>
 8003c94:	2a0b      	cmp	r2, #11
 8003c96:	d916      	bls.n	8003cc6 <_malloc_r+0xba>
 8003c98:	1961      	adds	r1, r4, r5
 8003c9a:	42a3      	cmp	r3, r4
 8003c9c:	6025      	str	r5, [r4, #0]
 8003c9e:	bf18      	it	ne
 8003ca0:	6059      	strne	r1, [r3, #4]
 8003ca2:	6863      	ldr	r3, [r4, #4]
 8003ca4:	bf08      	it	eq
 8003ca6:	6031      	streq	r1, [r6, #0]
 8003ca8:	5162      	str	r2, [r4, r5]
 8003caa:	604b      	str	r3, [r1, #4]
 8003cac:	4638      	mov	r0, r7
 8003cae:	f104 060b 	add.w	r6, r4, #11
 8003cb2:	f000 fa31 	bl	8004118 <__malloc_unlock>
 8003cb6:	f026 0607 	bic.w	r6, r6, #7
 8003cba:	1d23      	adds	r3, r4, #4
 8003cbc:	1af2      	subs	r2, r6, r3
 8003cbe:	d0b6      	beq.n	8003c2e <_malloc_r+0x22>
 8003cc0:	1b9b      	subs	r3, r3, r6
 8003cc2:	50a3      	str	r3, [r4, r2]
 8003cc4:	e7b3      	b.n	8003c2e <_malloc_r+0x22>
 8003cc6:	6862      	ldr	r2, [r4, #4]
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	bf0c      	ite	eq
 8003ccc:	6032      	streq	r2, [r6, #0]
 8003cce:	605a      	strne	r2, [r3, #4]
 8003cd0:	e7ec      	b.n	8003cac <_malloc_r+0xa0>
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	6864      	ldr	r4, [r4, #4]
 8003cd6:	e7b2      	b.n	8003c3e <_malloc_r+0x32>
 8003cd8:	4634      	mov	r4, r6
 8003cda:	6876      	ldr	r6, [r6, #4]
 8003cdc:	e7b9      	b.n	8003c52 <_malloc_r+0x46>
 8003cde:	230c      	movs	r3, #12
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	f000 fa18 	bl	8004118 <__malloc_unlock>
 8003ce8:	e7a1      	b.n	8003c2e <_malloc_r+0x22>
 8003cea:	6025      	str	r5, [r4, #0]
 8003cec:	e7de      	b.n	8003cac <_malloc_r+0xa0>
 8003cee:	bf00      	nop
 8003cf0:	20000994 	.word	0x20000994

08003cf4 <_printf_common>:
 8003cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf8:	4616      	mov	r6, r2
 8003cfa:	4699      	mov	r9, r3
 8003cfc:	688a      	ldr	r2, [r1, #8]
 8003cfe:	690b      	ldr	r3, [r1, #16]
 8003d00:	4607      	mov	r7, r0
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bfb8      	it	lt
 8003d06:	4613      	movlt	r3, r2
 8003d08:	6033      	str	r3, [r6, #0]
 8003d0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d0e:	460c      	mov	r4, r1
 8003d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d14:	b10a      	cbz	r2, 8003d1a <_printf_common+0x26>
 8003d16:	3301      	adds	r3, #1
 8003d18:	6033      	str	r3, [r6, #0]
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	0699      	lsls	r1, r3, #26
 8003d1e:	bf42      	ittt	mi
 8003d20:	6833      	ldrmi	r3, [r6, #0]
 8003d22:	3302      	addmi	r3, #2
 8003d24:	6033      	strmi	r3, [r6, #0]
 8003d26:	6825      	ldr	r5, [r4, #0]
 8003d28:	f015 0506 	ands.w	r5, r5, #6
 8003d2c:	d106      	bne.n	8003d3c <_printf_common+0x48>
 8003d2e:	f104 0a19 	add.w	sl, r4, #25
 8003d32:	68e3      	ldr	r3, [r4, #12]
 8003d34:	6832      	ldr	r2, [r6, #0]
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	42ab      	cmp	r3, r5
 8003d3a:	dc28      	bgt.n	8003d8e <_printf_common+0x9a>
 8003d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d40:	1e13      	subs	r3, r2, #0
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	bf18      	it	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	0692      	lsls	r2, r2, #26
 8003d4a:	d42d      	bmi.n	8003da8 <_printf_common+0xb4>
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	4638      	mov	r0, r7
 8003d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d54:	47c0      	blx	r8
 8003d56:	3001      	adds	r0, #1
 8003d58:	d020      	beq.n	8003d9c <_printf_common+0xa8>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	68e5      	ldr	r5, [r4, #12]
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf18      	it	ne
 8003d66:	2500      	movne	r5, #0
 8003d68:	6832      	ldr	r2, [r6, #0]
 8003d6a:	f04f 0600 	mov.w	r6, #0
 8003d6e:	68a3      	ldr	r3, [r4, #8]
 8003d70:	bf08      	it	eq
 8003d72:	1aad      	subeq	r5, r5, r2
 8003d74:	6922      	ldr	r2, [r4, #16]
 8003d76:	bf08      	it	eq
 8003d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	bfc4      	itt	gt
 8003d80:	1a9b      	subgt	r3, r3, r2
 8003d82:	18ed      	addgt	r5, r5, r3
 8003d84:	341a      	adds	r4, #26
 8003d86:	42b5      	cmp	r5, r6
 8003d88:	d11a      	bne.n	8003dc0 <_printf_common+0xcc>
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	e008      	b.n	8003da0 <_printf_common+0xac>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4652      	mov	r2, sl
 8003d92:	4649      	mov	r1, r9
 8003d94:	4638      	mov	r0, r7
 8003d96:	47c0      	blx	r8
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d103      	bne.n	8003da4 <_printf_common+0xb0>
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da4:	3501      	adds	r5, #1
 8003da6:	e7c4      	b.n	8003d32 <_printf_common+0x3e>
 8003da8:	2030      	movs	r0, #48	; 0x30
 8003daa:	18e1      	adds	r1, r4, r3
 8003dac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003db6:	4422      	add	r2, r4
 8003db8:	3302      	adds	r3, #2
 8003dba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dbe:	e7c5      	b.n	8003d4c <_printf_common+0x58>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	4638      	mov	r0, r7
 8003dc8:	47c0      	blx	r8
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d0e6      	beq.n	8003d9c <_printf_common+0xa8>
 8003dce:	3601      	adds	r6, #1
 8003dd0:	e7d9      	b.n	8003d86 <_printf_common+0x92>
	...

08003dd4 <_printf_i>:
 8003dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd8:	7e0f      	ldrb	r7, [r1, #24]
 8003dda:	4691      	mov	r9, r2
 8003ddc:	2f78      	cmp	r7, #120	; 0x78
 8003dde:	4680      	mov	r8, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	469a      	mov	sl, r3
 8003de4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dea:	d807      	bhi.n	8003dfc <_printf_i+0x28>
 8003dec:	2f62      	cmp	r7, #98	; 0x62
 8003dee:	d80a      	bhi.n	8003e06 <_printf_i+0x32>
 8003df0:	2f00      	cmp	r7, #0
 8003df2:	f000 80d9 	beq.w	8003fa8 <_printf_i+0x1d4>
 8003df6:	2f58      	cmp	r7, #88	; 0x58
 8003df8:	f000 80a4 	beq.w	8003f44 <_printf_i+0x170>
 8003dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e04:	e03a      	b.n	8003e7c <_printf_i+0xa8>
 8003e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e0a:	2b15      	cmp	r3, #21
 8003e0c:	d8f6      	bhi.n	8003dfc <_printf_i+0x28>
 8003e0e:	a101      	add	r1, pc, #4	; (adr r1, 8003e14 <_printf_i+0x40>)
 8003e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e14:	08003e6d 	.word	0x08003e6d
 8003e18:	08003e81 	.word	0x08003e81
 8003e1c:	08003dfd 	.word	0x08003dfd
 8003e20:	08003dfd 	.word	0x08003dfd
 8003e24:	08003dfd 	.word	0x08003dfd
 8003e28:	08003dfd 	.word	0x08003dfd
 8003e2c:	08003e81 	.word	0x08003e81
 8003e30:	08003dfd 	.word	0x08003dfd
 8003e34:	08003dfd 	.word	0x08003dfd
 8003e38:	08003dfd 	.word	0x08003dfd
 8003e3c:	08003dfd 	.word	0x08003dfd
 8003e40:	08003f8f 	.word	0x08003f8f
 8003e44:	08003eb1 	.word	0x08003eb1
 8003e48:	08003f71 	.word	0x08003f71
 8003e4c:	08003dfd 	.word	0x08003dfd
 8003e50:	08003dfd 	.word	0x08003dfd
 8003e54:	08003fb1 	.word	0x08003fb1
 8003e58:	08003dfd 	.word	0x08003dfd
 8003e5c:	08003eb1 	.word	0x08003eb1
 8003e60:	08003dfd 	.word	0x08003dfd
 8003e64:	08003dfd 	.word	0x08003dfd
 8003e68:	08003f79 	.word	0x08003f79
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	1d1a      	adds	r2, r3, #4
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	602a      	str	r2, [r5, #0]
 8003e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0a4      	b.n	8003fca <_printf_i+0x1f6>
 8003e80:	6820      	ldr	r0, [r4, #0]
 8003e82:	6829      	ldr	r1, [r5, #0]
 8003e84:	0606      	lsls	r6, r0, #24
 8003e86:	f101 0304 	add.w	r3, r1, #4
 8003e8a:	d50a      	bpl.n	8003ea2 <_printf_i+0xce>
 8003e8c:	680e      	ldr	r6, [r1, #0]
 8003e8e:	602b      	str	r3, [r5, #0]
 8003e90:	2e00      	cmp	r6, #0
 8003e92:	da03      	bge.n	8003e9c <_printf_i+0xc8>
 8003e94:	232d      	movs	r3, #45	; 0x2d
 8003e96:	4276      	negs	r6, r6
 8003e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e9c:	230a      	movs	r3, #10
 8003e9e:	485e      	ldr	r0, [pc, #376]	; (8004018 <_printf_i+0x244>)
 8003ea0:	e019      	b.n	8003ed6 <_printf_i+0x102>
 8003ea2:	680e      	ldr	r6, [r1, #0]
 8003ea4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ea8:	602b      	str	r3, [r5, #0]
 8003eaa:	bf18      	it	ne
 8003eac:	b236      	sxthne	r6, r6
 8003eae:	e7ef      	b.n	8003e90 <_printf_i+0xbc>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	6820      	ldr	r0, [r4, #0]
 8003eb4:	1d19      	adds	r1, r3, #4
 8003eb6:	6029      	str	r1, [r5, #0]
 8003eb8:	0601      	lsls	r1, r0, #24
 8003eba:	d501      	bpl.n	8003ec0 <_printf_i+0xec>
 8003ebc:	681e      	ldr	r6, [r3, #0]
 8003ebe:	e002      	b.n	8003ec6 <_printf_i+0xf2>
 8003ec0:	0646      	lsls	r6, r0, #25
 8003ec2:	d5fb      	bpl.n	8003ebc <_printf_i+0xe8>
 8003ec4:	881e      	ldrh	r6, [r3, #0]
 8003ec6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ec8:	bf0c      	ite	eq
 8003eca:	2308      	moveq	r3, #8
 8003ecc:	230a      	movne	r3, #10
 8003ece:	4852      	ldr	r0, [pc, #328]	; (8004018 <_printf_i+0x244>)
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ed6:	6865      	ldr	r5, [r4, #4]
 8003ed8:	2d00      	cmp	r5, #0
 8003eda:	bfa8      	it	ge
 8003edc:	6821      	ldrge	r1, [r4, #0]
 8003ede:	60a5      	str	r5, [r4, #8]
 8003ee0:	bfa4      	itt	ge
 8003ee2:	f021 0104 	bicge.w	r1, r1, #4
 8003ee6:	6021      	strge	r1, [r4, #0]
 8003ee8:	b90e      	cbnz	r6, 8003eee <_printf_i+0x11a>
 8003eea:	2d00      	cmp	r5, #0
 8003eec:	d04d      	beq.n	8003f8a <_printf_i+0x1b6>
 8003eee:	4615      	mov	r5, r2
 8003ef0:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ef4:	fb03 6711 	mls	r7, r3, r1, r6
 8003ef8:	5dc7      	ldrb	r7, [r0, r7]
 8003efa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003efe:	4637      	mov	r7, r6
 8003f00:	42bb      	cmp	r3, r7
 8003f02:	460e      	mov	r6, r1
 8003f04:	d9f4      	bls.n	8003ef0 <_printf_i+0x11c>
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d10b      	bne.n	8003f22 <_printf_i+0x14e>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	07de      	lsls	r6, r3, #31
 8003f0e:	d508      	bpl.n	8003f22 <_printf_i+0x14e>
 8003f10:	6923      	ldr	r3, [r4, #16]
 8003f12:	6861      	ldr	r1, [r4, #4]
 8003f14:	4299      	cmp	r1, r3
 8003f16:	bfde      	ittt	le
 8003f18:	2330      	movle	r3, #48	; 0x30
 8003f1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f1e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f22:	1b52      	subs	r2, r2, r5
 8003f24:	6122      	str	r2, [r4, #16]
 8003f26:	464b      	mov	r3, r9
 8003f28:	4621      	mov	r1, r4
 8003f2a:	4640      	mov	r0, r8
 8003f2c:	f8cd a000 	str.w	sl, [sp]
 8003f30:	aa03      	add	r2, sp, #12
 8003f32:	f7ff fedf 	bl	8003cf4 <_printf_common>
 8003f36:	3001      	adds	r0, #1
 8003f38:	d14c      	bne.n	8003fd4 <_printf_i+0x200>
 8003f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f3e:	b004      	add	sp, #16
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f44:	4834      	ldr	r0, [pc, #208]	; (8004018 <_printf_i+0x244>)
 8003f46:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f4a:	6829      	ldr	r1, [r5, #0]
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f52:	6029      	str	r1, [r5, #0]
 8003f54:	061d      	lsls	r5, r3, #24
 8003f56:	d514      	bpl.n	8003f82 <_printf_i+0x1ae>
 8003f58:	07df      	lsls	r7, r3, #31
 8003f5a:	bf44      	itt	mi
 8003f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f60:	6023      	strmi	r3, [r4, #0]
 8003f62:	b91e      	cbnz	r6, 8003f6c <_printf_i+0x198>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	f023 0320 	bic.w	r3, r3, #32
 8003f6a:	6023      	str	r3, [r4, #0]
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	e7af      	b.n	8003ed0 <_printf_i+0xfc>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	f043 0320 	orr.w	r3, r3, #32
 8003f76:	6023      	str	r3, [r4, #0]
 8003f78:	2378      	movs	r3, #120	; 0x78
 8003f7a:	4828      	ldr	r0, [pc, #160]	; (800401c <_printf_i+0x248>)
 8003f7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f80:	e7e3      	b.n	8003f4a <_printf_i+0x176>
 8003f82:	0659      	lsls	r1, r3, #25
 8003f84:	bf48      	it	mi
 8003f86:	b2b6      	uxthmi	r6, r6
 8003f88:	e7e6      	b.n	8003f58 <_printf_i+0x184>
 8003f8a:	4615      	mov	r5, r2
 8003f8c:	e7bb      	b.n	8003f06 <_printf_i+0x132>
 8003f8e:	682b      	ldr	r3, [r5, #0]
 8003f90:	6826      	ldr	r6, [r4, #0]
 8003f92:	1d18      	adds	r0, r3, #4
 8003f94:	6961      	ldr	r1, [r4, #20]
 8003f96:	6028      	str	r0, [r5, #0]
 8003f98:	0635      	lsls	r5, r6, #24
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	d501      	bpl.n	8003fa2 <_printf_i+0x1ce>
 8003f9e:	6019      	str	r1, [r3, #0]
 8003fa0:	e002      	b.n	8003fa8 <_printf_i+0x1d4>
 8003fa2:	0670      	lsls	r0, r6, #25
 8003fa4:	d5fb      	bpl.n	8003f9e <_printf_i+0x1ca>
 8003fa6:	8019      	strh	r1, [r3, #0]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4615      	mov	r5, r2
 8003fac:	6123      	str	r3, [r4, #16]
 8003fae:	e7ba      	b.n	8003f26 <_printf_i+0x152>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	1d1a      	adds	r2, r3, #4
 8003fb6:	602a      	str	r2, [r5, #0]
 8003fb8:	681d      	ldr	r5, [r3, #0]
 8003fba:	6862      	ldr	r2, [r4, #4]
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f000 f889 	bl	80040d4 <memchr>
 8003fc2:	b108      	cbz	r0, 8003fc8 <_printf_i+0x1f4>
 8003fc4:	1b40      	subs	r0, r0, r5
 8003fc6:	6060      	str	r0, [r4, #4]
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	6123      	str	r3, [r4, #16]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd2:	e7a8      	b.n	8003f26 <_printf_i+0x152>
 8003fd4:	462a      	mov	r2, r5
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	4640      	mov	r0, r8
 8003fda:	6923      	ldr	r3, [r4, #16]
 8003fdc:	47d0      	blx	sl
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d0ab      	beq.n	8003f3a <_printf_i+0x166>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	079b      	lsls	r3, r3, #30
 8003fe6:	d413      	bmi.n	8004010 <_printf_i+0x23c>
 8003fe8:	68e0      	ldr	r0, [r4, #12]
 8003fea:	9b03      	ldr	r3, [sp, #12]
 8003fec:	4298      	cmp	r0, r3
 8003fee:	bfb8      	it	lt
 8003ff0:	4618      	movlt	r0, r3
 8003ff2:	e7a4      	b.n	8003f3e <_printf_i+0x16a>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	4632      	mov	r2, r6
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	4640      	mov	r0, r8
 8003ffc:	47d0      	blx	sl
 8003ffe:	3001      	adds	r0, #1
 8004000:	d09b      	beq.n	8003f3a <_printf_i+0x166>
 8004002:	3501      	adds	r5, #1
 8004004:	68e3      	ldr	r3, [r4, #12]
 8004006:	9903      	ldr	r1, [sp, #12]
 8004008:	1a5b      	subs	r3, r3, r1
 800400a:	42ab      	cmp	r3, r5
 800400c:	dcf2      	bgt.n	8003ff4 <_printf_i+0x220>
 800400e:	e7eb      	b.n	8003fe8 <_printf_i+0x214>
 8004010:	2500      	movs	r5, #0
 8004012:	f104 0619 	add.w	r6, r4, #25
 8004016:	e7f5      	b.n	8004004 <_printf_i+0x230>
 8004018:	0800528a 	.word	0x0800528a
 800401c:	0800529b 	.word	0x0800529b

08004020 <_sbrk_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	2300      	movs	r3, #0
 8004024:	4d05      	ldr	r5, [pc, #20]	; (800403c <_sbrk_r+0x1c>)
 8004026:	4604      	mov	r4, r0
 8004028:	4608      	mov	r0, r1
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	f7fd fc6c 	bl	8001908 <_sbrk>
 8004030:	1c43      	adds	r3, r0, #1
 8004032:	d102      	bne.n	800403a <_sbrk_r+0x1a>
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	b103      	cbz	r3, 800403a <_sbrk_r+0x1a>
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	200009a0 	.word	0x200009a0

08004040 <sniprintf>:
 8004040:	b40c      	push	{r2, r3}
 8004042:	b530      	push	{r4, r5, lr}
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <sniprintf+0x64>)
 8004046:	1e0c      	subs	r4, r1, #0
 8004048:	681d      	ldr	r5, [r3, #0]
 800404a:	b09d      	sub	sp, #116	; 0x74
 800404c:	da08      	bge.n	8004060 <sniprintf+0x20>
 800404e:	238b      	movs	r3, #139	; 0x8b
 8004050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004054:	602b      	str	r3, [r5, #0]
 8004056:	b01d      	add	sp, #116	; 0x74
 8004058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800405c:	b002      	add	sp, #8
 800405e:	4770      	bx	lr
 8004060:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004064:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004068:	bf0c      	ite	eq
 800406a:	4623      	moveq	r3, r4
 800406c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004070:	9304      	str	r3, [sp, #16]
 8004072:	9307      	str	r3, [sp, #28]
 8004074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004078:	9002      	str	r0, [sp, #8]
 800407a:	9006      	str	r0, [sp, #24]
 800407c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004080:	4628      	mov	r0, r5
 8004082:	ab21      	add	r3, sp, #132	; 0x84
 8004084:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004086:	a902      	add	r1, sp, #8
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	f000 f8d5 	bl	8004238 <_svfiprintf_r>
 800408e:	1c43      	adds	r3, r0, #1
 8004090:	bfbc      	itt	lt
 8004092:	238b      	movlt	r3, #139	; 0x8b
 8004094:	602b      	strlt	r3, [r5, #0]
 8004096:	2c00      	cmp	r4, #0
 8004098:	d0dd      	beq.n	8004056 <sniprintf+0x16>
 800409a:	2200      	movs	r2, #0
 800409c:	9b02      	ldr	r3, [sp, #8]
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e7d9      	b.n	8004056 <sniprintf+0x16>
 80040a2:	bf00      	nop
 80040a4:	20000018 	.word	0x20000018

080040a8 <strncmp>:
 80040a8:	4603      	mov	r3, r0
 80040aa:	b510      	push	{r4, lr}
 80040ac:	b172      	cbz	r2, 80040cc <strncmp+0x24>
 80040ae:	3901      	subs	r1, #1
 80040b0:	1884      	adds	r4, r0, r2
 80040b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80040b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80040ba:	4290      	cmp	r0, r2
 80040bc:	d101      	bne.n	80040c2 <strncmp+0x1a>
 80040be:	42a3      	cmp	r3, r4
 80040c0:	d101      	bne.n	80040c6 <strncmp+0x1e>
 80040c2:	1a80      	subs	r0, r0, r2
 80040c4:	bd10      	pop	{r4, pc}
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d1f3      	bne.n	80040b2 <strncmp+0xa>
 80040ca:	e7fa      	b.n	80040c2 <strncmp+0x1a>
 80040cc:	4610      	mov	r0, r2
 80040ce:	e7f9      	b.n	80040c4 <strncmp+0x1c>

080040d0 <__retarget_lock_acquire_recursive>:
 80040d0:	4770      	bx	lr

080040d2 <__retarget_lock_release_recursive>:
 80040d2:	4770      	bx	lr

080040d4 <memchr>:
 80040d4:	4603      	mov	r3, r0
 80040d6:	b510      	push	{r4, lr}
 80040d8:	b2c9      	uxtb	r1, r1
 80040da:	4402      	add	r2, r0
 80040dc:	4293      	cmp	r3, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	d101      	bne.n	80040e6 <memchr+0x12>
 80040e2:	2000      	movs	r0, #0
 80040e4:	e003      	b.n	80040ee <memchr+0x1a>
 80040e6:	7804      	ldrb	r4, [r0, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	428c      	cmp	r4, r1
 80040ec:	d1f6      	bne.n	80040dc <memchr+0x8>
 80040ee:	bd10      	pop	{r4, pc}

080040f0 <memcpy>:
 80040f0:	440a      	add	r2, r1
 80040f2:	4291      	cmp	r1, r2
 80040f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80040f8:	d100      	bne.n	80040fc <memcpy+0xc>
 80040fa:	4770      	bx	lr
 80040fc:	b510      	push	{r4, lr}
 80040fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004102:	4291      	cmp	r1, r2
 8004104:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004108:	d1f9      	bne.n	80040fe <memcpy+0xe>
 800410a:	bd10      	pop	{r4, pc}

0800410c <__malloc_lock>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__malloc_lock+0x8>)
 800410e:	f7ff bfdf 	b.w	80040d0 <__retarget_lock_acquire_recursive>
 8004112:	bf00      	nop
 8004114:	2000099c 	.word	0x2000099c

08004118 <__malloc_unlock>:
 8004118:	4801      	ldr	r0, [pc, #4]	; (8004120 <__malloc_unlock+0x8>)
 800411a:	f7ff bfda 	b.w	80040d2 <__retarget_lock_release_recursive>
 800411e:	bf00      	nop
 8004120:	2000099c 	.word	0x2000099c

08004124 <_realloc_r>:
 8004124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004128:	4680      	mov	r8, r0
 800412a:	4614      	mov	r4, r2
 800412c:	460e      	mov	r6, r1
 800412e:	b921      	cbnz	r1, 800413a <_realloc_r+0x16>
 8004130:	4611      	mov	r1, r2
 8004132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004136:	f7ff bd69 	b.w	8003c0c <_malloc_r>
 800413a:	b92a      	cbnz	r2, 8004148 <_realloc_r+0x24>
 800413c:	f7ff fcfe 	bl	8003b3c <_free_r>
 8004140:	4625      	mov	r5, r4
 8004142:	4628      	mov	r0, r5
 8004144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004148:	f000 f976 	bl	8004438 <_malloc_usable_size_r>
 800414c:	4284      	cmp	r4, r0
 800414e:	4607      	mov	r7, r0
 8004150:	d802      	bhi.n	8004158 <_realloc_r+0x34>
 8004152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004156:	d812      	bhi.n	800417e <_realloc_r+0x5a>
 8004158:	4621      	mov	r1, r4
 800415a:	4640      	mov	r0, r8
 800415c:	f7ff fd56 	bl	8003c0c <_malloc_r>
 8004160:	4605      	mov	r5, r0
 8004162:	2800      	cmp	r0, #0
 8004164:	d0ed      	beq.n	8004142 <_realloc_r+0x1e>
 8004166:	42bc      	cmp	r4, r7
 8004168:	4622      	mov	r2, r4
 800416a:	4631      	mov	r1, r6
 800416c:	bf28      	it	cs
 800416e:	463a      	movcs	r2, r7
 8004170:	f7ff ffbe 	bl	80040f0 <memcpy>
 8004174:	4631      	mov	r1, r6
 8004176:	4640      	mov	r0, r8
 8004178:	f7ff fce0 	bl	8003b3c <_free_r>
 800417c:	e7e1      	b.n	8004142 <_realloc_r+0x1e>
 800417e:	4635      	mov	r5, r6
 8004180:	e7df      	b.n	8004142 <_realloc_r+0x1e>

08004182 <__ssputs_r>:
 8004182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004186:	688e      	ldr	r6, [r1, #8]
 8004188:	4682      	mov	sl, r0
 800418a:	429e      	cmp	r6, r3
 800418c:	460c      	mov	r4, r1
 800418e:	4690      	mov	r8, r2
 8004190:	461f      	mov	r7, r3
 8004192:	d838      	bhi.n	8004206 <__ssputs_r+0x84>
 8004194:	898a      	ldrh	r2, [r1, #12]
 8004196:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800419a:	d032      	beq.n	8004202 <__ssputs_r+0x80>
 800419c:	6825      	ldr	r5, [r4, #0]
 800419e:	6909      	ldr	r1, [r1, #16]
 80041a0:	3301      	adds	r3, #1
 80041a2:	eba5 0901 	sub.w	r9, r5, r1
 80041a6:	6965      	ldr	r5, [r4, #20]
 80041a8:	444b      	add	r3, r9
 80041aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041b2:	106d      	asrs	r5, r5, #1
 80041b4:	429d      	cmp	r5, r3
 80041b6:	bf38      	it	cc
 80041b8:	461d      	movcc	r5, r3
 80041ba:	0553      	lsls	r3, r2, #21
 80041bc:	d531      	bpl.n	8004222 <__ssputs_r+0xa0>
 80041be:	4629      	mov	r1, r5
 80041c0:	f7ff fd24 	bl	8003c0c <_malloc_r>
 80041c4:	4606      	mov	r6, r0
 80041c6:	b950      	cbnz	r0, 80041de <__ssputs_r+0x5c>
 80041c8:	230c      	movs	r3, #12
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041ce:	f8ca 3000 	str.w	r3, [sl]
 80041d2:	89a3      	ldrh	r3, [r4, #12]
 80041d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041de:	464a      	mov	r2, r9
 80041e0:	6921      	ldr	r1, [r4, #16]
 80041e2:	f7ff ff85 	bl	80040f0 <memcpy>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	81a3      	strh	r3, [r4, #12]
 80041f2:	6126      	str	r6, [r4, #16]
 80041f4:	444e      	add	r6, r9
 80041f6:	6026      	str	r6, [r4, #0]
 80041f8:	463e      	mov	r6, r7
 80041fa:	6165      	str	r5, [r4, #20]
 80041fc:	eba5 0509 	sub.w	r5, r5, r9
 8004200:	60a5      	str	r5, [r4, #8]
 8004202:	42be      	cmp	r6, r7
 8004204:	d900      	bls.n	8004208 <__ssputs_r+0x86>
 8004206:	463e      	mov	r6, r7
 8004208:	4632      	mov	r2, r6
 800420a:	4641      	mov	r1, r8
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	f7ff fc5f 	bl	8003ad0 <memmove>
 8004212:	68a3      	ldr	r3, [r4, #8]
 8004214:	2000      	movs	r0, #0
 8004216:	1b9b      	subs	r3, r3, r6
 8004218:	60a3      	str	r3, [r4, #8]
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	4433      	add	r3, r6
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	e7db      	b.n	80041da <__ssputs_r+0x58>
 8004222:	462a      	mov	r2, r5
 8004224:	f7ff ff7e 	bl	8004124 <_realloc_r>
 8004228:	4606      	mov	r6, r0
 800422a:	2800      	cmp	r0, #0
 800422c:	d1e1      	bne.n	80041f2 <__ssputs_r+0x70>
 800422e:	4650      	mov	r0, sl
 8004230:	6921      	ldr	r1, [r4, #16]
 8004232:	f7ff fc83 	bl	8003b3c <_free_r>
 8004236:	e7c7      	b.n	80041c8 <__ssputs_r+0x46>

08004238 <_svfiprintf_r>:
 8004238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800423c:	4698      	mov	r8, r3
 800423e:	898b      	ldrh	r3, [r1, #12]
 8004240:	4607      	mov	r7, r0
 8004242:	061b      	lsls	r3, r3, #24
 8004244:	460d      	mov	r5, r1
 8004246:	4614      	mov	r4, r2
 8004248:	b09d      	sub	sp, #116	; 0x74
 800424a:	d50e      	bpl.n	800426a <_svfiprintf_r+0x32>
 800424c:	690b      	ldr	r3, [r1, #16]
 800424e:	b963      	cbnz	r3, 800426a <_svfiprintf_r+0x32>
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	f7ff fcdb 	bl	8003c0c <_malloc_r>
 8004256:	6028      	str	r0, [r5, #0]
 8004258:	6128      	str	r0, [r5, #16]
 800425a:	b920      	cbnz	r0, 8004266 <_svfiprintf_r+0x2e>
 800425c:	230c      	movs	r3, #12
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004264:	e0d1      	b.n	800440a <_svfiprintf_r+0x1d2>
 8004266:	2340      	movs	r3, #64	; 0x40
 8004268:	616b      	str	r3, [r5, #20]
 800426a:	2300      	movs	r3, #0
 800426c:	9309      	str	r3, [sp, #36]	; 0x24
 800426e:	2320      	movs	r3, #32
 8004270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004274:	2330      	movs	r3, #48	; 0x30
 8004276:	f04f 0901 	mov.w	r9, #1
 800427a:	f8cd 800c 	str.w	r8, [sp, #12]
 800427e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004424 <_svfiprintf_r+0x1ec>
 8004282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004286:	4623      	mov	r3, r4
 8004288:	469a      	mov	sl, r3
 800428a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800428e:	b10a      	cbz	r2, 8004294 <_svfiprintf_r+0x5c>
 8004290:	2a25      	cmp	r2, #37	; 0x25
 8004292:	d1f9      	bne.n	8004288 <_svfiprintf_r+0x50>
 8004294:	ebba 0b04 	subs.w	fp, sl, r4
 8004298:	d00b      	beq.n	80042b2 <_svfiprintf_r+0x7a>
 800429a:	465b      	mov	r3, fp
 800429c:	4622      	mov	r2, r4
 800429e:	4629      	mov	r1, r5
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ff6e 	bl	8004182 <__ssputs_r>
 80042a6:	3001      	adds	r0, #1
 80042a8:	f000 80aa 	beq.w	8004400 <_svfiprintf_r+0x1c8>
 80042ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ae:	445a      	add	r2, fp
 80042b0:	9209      	str	r2, [sp, #36]	; 0x24
 80042b2:	f89a 3000 	ldrb.w	r3, [sl]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a2 	beq.w	8004400 <_svfiprintf_r+0x1c8>
 80042bc:	2300      	movs	r3, #0
 80042be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042c6:	f10a 0a01 	add.w	sl, sl, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	9307      	str	r3, [sp, #28]
 80042ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042d2:	931a      	str	r3, [sp, #104]	; 0x68
 80042d4:	4654      	mov	r4, sl
 80042d6:	2205      	movs	r2, #5
 80042d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042dc:	4851      	ldr	r0, [pc, #324]	; (8004424 <_svfiprintf_r+0x1ec>)
 80042de:	f7ff fef9 	bl	80040d4 <memchr>
 80042e2:	9a04      	ldr	r2, [sp, #16]
 80042e4:	b9d8      	cbnz	r0, 800431e <_svfiprintf_r+0xe6>
 80042e6:	06d0      	lsls	r0, r2, #27
 80042e8:	bf44      	itt	mi
 80042ea:	2320      	movmi	r3, #32
 80042ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042f0:	0711      	lsls	r1, r2, #28
 80042f2:	bf44      	itt	mi
 80042f4:	232b      	movmi	r3, #43	; 0x2b
 80042f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042fa:	f89a 3000 	ldrb.w	r3, [sl]
 80042fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004300:	d015      	beq.n	800432e <_svfiprintf_r+0xf6>
 8004302:	4654      	mov	r4, sl
 8004304:	2000      	movs	r0, #0
 8004306:	f04f 0c0a 	mov.w	ip, #10
 800430a:	9a07      	ldr	r2, [sp, #28]
 800430c:	4621      	mov	r1, r4
 800430e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004312:	3b30      	subs	r3, #48	; 0x30
 8004314:	2b09      	cmp	r3, #9
 8004316:	d94e      	bls.n	80043b6 <_svfiprintf_r+0x17e>
 8004318:	b1b0      	cbz	r0, 8004348 <_svfiprintf_r+0x110>
 800431a:	9207      	str	r2, [sp, #28]
 800431c:	e014      	b.n	8004348 <_svfiprintf_r+0x110>
 800431e:	eba0 0308 	sub.w	r3, r0, r8
 8004322:	fa09 f303 	lsl.w	r3, r9, r3
 8004326:	4313      	orrs	r3, r2
 8004328:	46a2      	mov	sl, r4
 800432a:	9304      	str	r3, [sp, #16]
 800432c:	e7d2      	b.n	80042d4 <_svfiprintf_r+0x9c>
 800432e:	9b03      	ldr	r3, [sp, #12]
 8004330:	1d19      	adds	r1, r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	9103      	str	r1, [sp, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	bfbb      	ittet	lt
 800433a:	425b      	neglt	r3, r3
 800433c:	f042 0202 	orrlt.w	r2, r2, #2
 8004340:	9307      	strge	r3, [sp, #28]
 8004342:	9307      	strlt	r3, [sp, #28]
 8004344:	bfb8      	it	lt
 8004346:	9204      	strlt	r2, [sp, #16]
 8004348:	7823      	ldrb	r3, [r4, #0]
 800434a:	2b2e      	cmp	r3, #46	; 0x2e
 800434c:	d10c      	bne.n	8004368 <_svfiprintf_r+0x130>
 800434e:	7863      	ldrb	r3, [r4, #1]
 8004350:	2b2a      	cmp	r3, #42	; 0x2a
 8004352:	d135      	bne.n	80043c0 <_svfiprintf_r+0x188>
 8004354:	9b03      	ldr	r3, [sp, #12]
 8004356:	3402      	adds	r4, #2
 8004358:	1d1a      	adds	r2, r3, #4
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	9203      	str	r2, [sp, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	bfb8      	it	lt
 8004362:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004366:	9305      	str	r3, [sp, #20]
 8004368:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004428 <_svfiprintf_r+0x1f0>
 800436c:	2203      	movs	r2, #3
 800436e:	4650      	mov	r0, sl
 8004370:	7821      	ldrb	r1, [r4, #0]
 8004372:	f7ff feaf 	bl	80040d4 <memchr>
 8004376:	b140      	cbz	r0, 800438a <_svfiprintf_r+0x152>
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	eba0 000a 	sub.w	r0, r0, sl
 800437e:	fa03 f000 	lsl.w	r0, r3, r0
 8004382:	9b04      	ldr	r3, [sp, #16]
 8004384:	3401      	adds	r4, #1
 8004386:	4303      	orrs	r3, r0
 8004388:	9304      	str	r3, [sp, #16]
 800438a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800438e:	2206      	movs	r2, #6
 8004390:	4826      	ldr	r0, [pc, #152]	; (800442c <_svfiprintf_r+0x1f4>)
 8004392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004396:	f7ff fe9d 	bl	80040d4 <memchr>
 800439a:	2800      	cmp	r0, #0
 800439c:	d038      	beq.n	8004410 <_svfiprintf_r+0x1d8>
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <_svfiprintf_r+0x1f8>)
 80043a0:	bb1b      	cbnz	r3, 80043ea <_svfiprintf_r+0x1b2>
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	3307      	adds	r3, #7
 80043a6:	f023 0307 	bic.w	r3, r3, #7
 80043aa:	3308      	adds	r3, #8
 80043ac:	9303      	str	r3, [sp, #12]
 80043ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b0:	4433      	add	r3, r6
 80043b2:	9309      	str	r3, [sp, #36]	; 0x24
 80043b4:	e767      	b.n	8004286 <_svfiprintf_r+0x4e>
 80043b6:	460c      	mov	r4, r1
 80043b8:	2001      	movs	r0, #1
 80043ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80043be:	e7a5      	b.n	800430c <_svfiprintf_r+0xd4>
 80043c0:	2300      	movs	r3, #0
 80043c2:	f04f 0c0a 	mov.w	ip, #10
 80043c6:	4619      	mov	r1, r3
 80043c8:	3401      	adds	r4, #1
 80043ca:	9305      	str	r3, [sp, #20]
 80043cc:	4620      	mov	r0, r4
 80043ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043d2:	3a30      	subs	r2, #48	; 0x30
 80043d4:	2a09      	cmp	r2, #9
 80043d6:	d903      	bls.n	80043e0 <_svfiprintf_r+0x1a8>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0c5      	beq.n	8004368 <_svfiprintf_r+0x130>
 80043dc:	9105      	str	r1, [sp, #20]
 80043de:	e7c3      	b.n	8004368 <_svfiprintf_r+0x130>
 80043e0:	4604      	mov	r4, r0
 80043e2:	2301      	movs	r3, #1
 80043e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043e8:	e7f0      	b.n	80043cc <_svfiprintf_r+0x194>
 80043ea:	ab03      	add	r3, sp, #12
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	462a      	mov	r2, r5
 80043f0:	4638      	mov	r0, r7
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <_svfiprintf_r+0x1fc>)
 80043f4:	a904      	add	r1, sp, #16
 80043f6:	f3af 8000 	nop.w
 80043fa:	1c42      	adds	r2, r0, #1
 80043fc:	4606      	mov	r6, r0
 80043fe:	d1d6      	bne.n	80043ae <_svfiprintf_r+0x176>
 8004400:	89ab      	ldrh	r3, [r5, #12]
 8004402:	065b      	lsls	r3, r3, #25
 8004404:	f53f af2c 	bmi.w	8004260 <_svfiprintf_r+0x28>
 8004408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800440a:	b01d      	add	sp, #116	; 0x74
 800440c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004410:	ab03      	add	r3, sp, #12
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	462a      	mov	r2, r5
 8004416:	4638      	mov	r0, r7
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <_svfiprintf_r+0x1fc>)
 800441a:	a904      	add	r1, sp, #16
 800441c:	f7ff fcda 	bl	8003dd4 <_printf_i>
 8004420:	e7eb      	b.n	80043fa <_svfiprintf_r+0x1c2>
 8004422:	bf00      	nop
 8004424:	0800530c 	.word	0x0800530c
 8004428:	08005312 	.word	0x08005312
 800442c:	08005316 	.word	0x08005316
 8004430:	00000000 	.word	0x00000000
 8004434:	08004183 	.word	0x08004183

08004438 <_malloc_usable_size_r>:
 8004438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443c:	1f18      	subs	r0, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfbc      	itt	lt
 8004442:	580b      	ldrlt	r3, [r1, r0]
 8004444:	18c0      	addlt	r0, r0, r3
 8004446:	4770      	bx	lr

08004448 <_init>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr

08004454 <_fini>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	bf00      	nop
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr
